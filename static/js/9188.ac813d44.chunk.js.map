{"version":3,"file":"static/js/9188.ac813d44.chunk.js","mappings":"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","sources":["../node_modules/bs58/index.js","../node_modules/bs58check/base.js","../node_modules/bs58check/index.js","../node_modules/hdkey/lib/hdkey.js","../node_modules/hdkey/node_modules/secp256k1/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/elliptic.js","../node_modules/hdkey/node_modules/secp256k1/lib/index.js"],"sourcesContent":["var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n\nvar base58 = require('bs58')\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function (checksumFn) {\n  // Encode a buffer as a base58-check encoded string\n  function encode (payload) {\n    var checksum = checksumFn(payload)\n\n    return base58.encode(Buffer.concat([\n      payload,\n      checksum\n    ], payload.length + 4))\n  }\n\n  function decodeRaw (buffer) {\n    var payload = buffer.slice(0, -4)\n    var checksum = buffer.slice(-4)\n    var newChecksum = checksumFn(payload)\n\n    if (checksum[0] ^ newChecksum[0] |\n        checksum[1] ^ newChecksum[1] |\n        checksum[2] ^ newChecksum[2] |\n        checksum[3] ^ newChecksum[3]) return\n\n    return payload\n  }\n\n  // Decode a base58-check encoded string to a buffer, no result if checksum is wrong\n  function decodeUnsafe (string) {\n    var buffer = base58.decodeUnsafe(string)\n    if (!buffer) return\n\n    return decodeRaw(buffer)\n  }\n\n  function decode (string) {\n    var buffer = base58.decode(string)\n    var payload = decodeRaw(buffer, checksumFn)\n    if (!payload) throw new Error('Invalid checksum')\n    return payload\n  }\n\n  return {\n    encode: encode,\n    decode: decode,\n    decodeUnsafe: decodeUnsafe\n  }\n}\n","'use strict'\n\nvar createHash = require('create-hash')\nvar bs58checkBase = require('./base')\n\n// SHA256(SHA256(buffer))\nfunction sha256x2 (buffer) {\n  var tmp = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(tmp).digest()\n}\n\nmodule.exports = bs58checkBase(sha256x2)\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","module.exports = require('./lib')(require('./lib/elliptic'))\n","const EC = require('elliptic').ec\n\nconst ec = new EC('secp256k1')\nconst ecparams = ec.curve\n\n// Hack, we can not use bn.js@5, while elliptic uses bn.js@4\n// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758\nconst BN = ecparams.n.constructor\n\nfunction loadCompressedPublicKey (first, xbuf) {\n  let x = new BN(xbuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  let y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xbuf, ybuf) {\n  let x = new BN(xbuf)\n  let y = new BN(ybuf)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  const x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (pubkey) {\n  // length should be validated in interface\n  const first = pubkey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (pubkey.length !== 33) return null\n      return loadCompressedPublicKey(first, pubkey.subarray(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (pubkey.length !== 65) return null\n      return loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65))\n    default:\n      return null\n  }\n}\n\nfunction savePublicKey (output, point) {\n  const pubkey = point.encode(null, output.length === 33)\n  // Loop should be faster because we do not need create extra Uint8Array\n  // output.set(new Uint8Array(pubkey))\n  for (let i = 0; i < output.length; ++i) output[i] = pubkey[i]\n}\n\nmodule.exports = {\n  contextRandomize () {\n    return 0\n  },\n\n  privateKeyVerify (seckey) {\n    const bn = new BN(seckey)\n    return bn.cmp(ecparams.n) < 0 && !bn.isZero() ? 0 : 1\n  },\n\n  privateKeyNegate (seckey) {\n    const bn = new BN(seckey)\n    const negate = ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(negate)\n    return 0\n  },\n\n  privateKeyTweakAdd (seckey, tweak) {\n    const bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0) return 1\n\n    bn.iadd(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n    if (bn.isZero()) return 1\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  privateKeyTweakMul (seckey, tweak) {\n    let bn = new BN(tweak)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    bn.imul(new BN(seckey))\n    if (bn.cmp(ecparams.n) >= 0) bn = bn.umod(ecparams.n)\n\n    const tweaked = bn.toArrayLike(Uint8Array, 'be', 32)\n    seckey.set(tweaked)\n\n    return 0\n  },\n\n  publicKeyVerify (pubkey) {\n    const pair = loadPublicKey(pubkey)\n    return pair === null ? 1 : 0\n  },\n\n  publicKeyCreate (output, seckey) {\n    const bn = new BN(seckey)\n    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) return 1\n\n    const point = ec.keyFromPrivate(seckey).getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyConvert (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyNegate (output, pubkey) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const point = pair.getPublic()\n    point.y = point.y.redNeg()\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyCombine (output, pubkeys) {\n    const pairs = new Array(pubkeys.length)\n    for (let i = 0; i < pubkeys.length; ++i) {\n      pairs[i] = loadPublicKey(pubkeys[i])\n      if (pairs[i] === null) return 1\n    }\n\n    let point = pairs[0].getPublic()\n    for (let i = 1; i < pairs.length; ++i) point = point.add(pairs[i].pub)\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakAdd (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0) return 2\n\n    const point = pair.getPublic().add(ecparams.g.mul(tweak))\n    if (point.isInfinity()) return 2\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  publicKeyTweakMul (output, pubkey, tweak) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    tweak = new BN(tweak)\n    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) return 2\n\n    const point = pair.getPublic().mul(tweak)\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  signatureNormalize (sig) {\n    const r = new BN(sig.subarray(0, 32))\n    const s = new BN(sig.subarray(32, 64))\n    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) return 1\n\n    if (s.cmp(ec.nh) === 1) {\n      sig.set(ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32)\n    }\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureExport (obj, sig) {\n    const sigR = sig.subarray(0, 32)\n    const sigS = sig.subarray(32, 64)\n    if (new BN(sigR).cmp(ecparams.n) >= 0) return 1\n    if (new BN(sigS).cmp(ecparams.n) >= 0) return 1\n\n    const { output } = obj\n\n    // Prepare R\n    let r = output.subarray(4, 4 + 33)\n    r[0] = 0x00\n    r.set(sigR, 1)\n\n    let lenR = 33\n    let posR = 0\n    for (; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n    r = r.subarray(posR)\n    if (r[0] & 0x80) return 1\n    if (lenR > 1 && (r[0] === 0x00) && !(r[1] & 0x80)) return 1\n\n    // Prepare S\n    let s = output.subarray(6 + 33, 6 + 33 + 33)\n    s[0] = 0x00\n    s.set(sigS, 1)\n\n    let lenS = 33\n    let posS = 0\n    for (; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n    s = s.subarray(posS)\n    if (s[0] & 0x80) return 1\n    if (lenS > 1 && (s[0] === 0x00) && !(s[1] & 0x80)) return 1\n\n    // Set output length for return\n    obj.outputlen = 6 + lenR + lenS\n\n    // Output in specified format\n    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]\n    output[0] = 0x30\n    output[1] = obj.outputlen - 2\n    output[2] = 0x02\n    output[3] = r.length\n    output.set(r, 4)\n    output[4 + lenR] = 0x02\n    output[5 + lenR] = s.length\n    output.set(s, 6 + lenR)\n\n    return 0\n  },\n\n  // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js\n  // Adapted for Uint8Array instead Buffer\n  signatureImport (output, sig) {\n    if (sig.length < 8) return 1\n    if (sig.length > 72) return 1\n    if (sig[0] !== 0x30) return 1\n    if (sig[1] !== sig.length - 2) return 1\n    if (sig[2] !== 0x02) return 1\n\n    const lenR = sig[3]\n    if (lenR === 0) return 1\n    if (5 + lenR >= sig.length) return 1\n    if (sig[4 + lenR] !== 0x02) return 1\n\n    const lenS = sig[5 + lenR]\n    if (lenS === 0) return 1\n    if ((6 + lenR + lenS) !== sig.length) return 1\n\n    if (sig[4] & 0x80) return 1\n    if (lenR > 1 && (sig[4] === 0x00) && !(sig[5] & 0x80)) return 1\n\n    if (sig[lenR + 6] & 0x80) return 1\n    if (lenS > 1 && (sig[lenR + 6] === 0x00) && !(sig[lenR + 7] & 0x80)) return 1\n\n    let sigR = sig.subarray(4, 4 + lenR)\n    if (sigR.length === 33 && sigR[0] === 0x00) sigR = sigR.subarray(1)\n    if (sigR.length > 32) return 1\n\n    let sigS = sig.subarray(6 + lenR)\n    if (sigS.length === 33 && sigS[0] === 0x00) sigS = sigS.slice(1)\n    if (sigS.length > 32) throw new Error('S length is too long')\n\n    let r = new BN(sigR)\n    if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n    let s = new BN(sig.subarray(6 + lenR))\n    if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n    output.set(r.toArrayLike(Uint8Array, 'be', 32), 0)\n    output.set(s.toArrayLike(Uint8Array, 'be', 32), 32)\n\n    return 0\n  },\n\n  ecdsaSign (obj, message, seckey, data, noncefn) {\n    if (noncefn) {\n      const _noncefn = noncefn\n      noncefn = (counter) => {\n        const nonce = _noncefn(message, seckey, null, data, counter)\n\n        const isValid = nonce instanceof Uint8Array && nonce.length === 32\n        if (!isValid) throw new Error('This is the way')\n\n        return new BN(nonce)\n      }\n    }\n\n    const d = new BN(seckey)\n    if (d.cmp(ecparams.n) >= 0 || d.isZero()) return 1\n\n    let sig\n    try {\n      sig = ec.sign(message, seckey, { canonical: true, k: noncefn, pers: data })\n    } catch (err) {\n      return 1\n    }\n\n    obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0)\n    obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32)\n    obj.recid = sig.recoveryParam\n\n    return 0\n  },\n\n  ecdsaVerify (sig, msg32, pubkey) {\n    const sigObj = { r: sig.subarray(0, 32), s: sig.subarray(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3\n\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 2\n\n    const point = pair.getPublic()\n    const isValid = ec.verify(msg32, sigObj, point)\n    return isValid ? 0 : 3\n  },\n\n  ecdsaRecover (output, sig, recid, msg32) {\n    const sigObj = { r: sig.slice(0, 32), s: sig.slice(32, 64) }\n\n    const sigr = new BN(sigObj.r)\n    const sigs = new BN(sigObj.s)\n    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) return 1\n\n    if (sigr.isZero() || sigs.isZero()) return 2\n\n    // Can throw `throw new Error('Unable to find sencond key candinate');`\n    let point\n    try {\n      point = ec.recoverPubKey(msg32, sigObj, recid)\n    } catch (err) {\n      return 2\n    }\n\n    savePublicKey(output, point)\n\n    return 0\n  },\n\n  ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {\n    const pair = loadPublicKey(pubkey)\n    if (pair === null) return 1\n\n    const scalar = new BN(seckey)\n    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) return 2\n\n    const point = pair.getPublic().mul(scalar)\n\n    if (hashfn === undefined) {\n      const data = point.encode(null, true)\n      const sha256 = ec.hash().update(data).digest()\n      for (let i = 0; i < 32; ++i) output[i] = sha256[i]\n    } else {\n      if (!xbuf) xbuf = new Uint8Array(32)\n      const x = point.getX().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) xbuf[i] = x[i]\n\n      if (!ybuf) ybuf = new Uint8Array(32)\n      const y = point.getY().toArray('be', 32)\n      for (let i = 0; i < 32; ++i) ybuf[i] = y[i]\n\n      const hash = hashfn(xbuf, ybuf, data)\n\n      const isValid = hash instanceof Uint8Array && hash.length === output.length\n      if (!isValid) return 2\n\n      output.set(hash)\n    }\n\n    return 0\n  }\n}\n","const errors = {\n  IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',\n  TWEAK_ADD:\n    'The tweak was out of range or the resulted private key is invalid',\n  TWEAK_MUL: 'The tweak was out of range or equal to zero',\n  CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',\n  SECKEY_INVALID: 'Private Key is invalid',\n  PUBKEY_PARSE: 'Public Key could not be parsed',\n  PUBKEY_SERIALIZE: 'Public Key serialization error',\n  PUBKEY_COMBINE: 'The sum of the public keys is not valid',\n  SIG_PARSE: 'Signature could not be parsed',\n  SIGN: 'The nonce generation function failed, or the private key was invalid',\n  RECOVER: 'Public key could not be recover',\n  ECDH: 'Scalar was invalid (zero or overflow)'\n}\n\nfunction assert (cond, msg) {\n  if (!cond) throw new Error(msg)\n}\n\nfunction isUint8Array (name, value, length) {\n  assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`)\n\n  if (length !== undefined) {\n    if (Array.isArray(length)) {\n      const numbers = length.join(', ')\n      const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`\n      assert(length.includes(value.length), msg)\n    } else {\n      const msg = `Expected ${name} to be an Uint8Array with length ${length}`\n      assert(value.length === length, msg)\n    }\n  }\n}\n\nfunction isCompressed (value) {\n  assert(toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean')\n}\n\nfunction getAssertedOutput (output = (len) => new Uint8Array(len), length) {\n  if (typeof output === 'function') output = output(length)\n  isUint8Array('output', output, length)\n  return output\n}\n\nfunction toTypeString (value) {\n  return Object.prototype.toString.call(value).slice(8, -1)\n}\n\nmodule.exports = (secp256k1) => {\n  return {\n    contextRandomize (seed) {\n      assert(\n        seed === null || seed instanceof Uint8Array,\n        'Expected seed to be an Uint8Array or null'\n      )\n      if (seed !== null) isUint8Array('seed', seed, 32)\n\n      switch (secp256k1.contextRandomize(seed)) {\n        case 1:\n          throw new Error(errors.CONTEXT_RANDOMIZE_UNKNOW)\n      }\n    },\n\n    privateKeyVerify (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      return secp256k1.privateKeyVerify(seckey) === 0\n    },\n\n    privateKeyNegate (seckey) {\n      isUint8Array('private key', seckey, 32)\n\n      switch (secp256k1.privateKeyNegate(seckey)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    privateKeyTweakAdd (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakAdd(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    privateKeyTweakMul (seckey, tweak) {\n      isUint8Array('private key', seckey, 32)\n      isUint8Array('tweak', tweak, 32)\n\n      switch (secp256k1.privateKeyTweakMul(seckey, tweak)) {\n        case 0:\n          return seckey\n        case 1:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    publicKeyVerify (pubkey) {\n      isUint8Array('public key', pubkey, [33, 65])\n\n      return secp256k1.publicKeyVerify(pubkey) === 0\n    },\n\n    publicKeyCreate (seckey, compressed = true, output) {\n      isUint8Array('private key', seckey, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCreate(output, seckey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SECKEY_INVALID)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyConvert (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyConvert(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyNegate (pubkey, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyNegate(output, pubkey)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyCombine (pubkeys, compressed = true, output) {\n      assert(Array.isArray(pubkeys), 'Expected public keys to be an Array')\n      assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items')\n      for (const pubkey of pubkeys) {\n        isUint8Array('public key', pubkey, [33, 65])\n      }\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyCombine(output, pubkeys)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_COMBINE)\n        case 3:\n          throw new Error(errors.PUBKEY_SERIALIZE)\n      }\n    },\n\n    publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakAdd(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_ADD)\n      }\n    },\n\n    publicKeyTweakMul (pubkey, tweak, compressed = true, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('tweak', tweak, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.publicKeyTweakMul(output, pubkey, tweak)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.TWEAK_MUL)\n      }\n    },\n\n    signatureNormalize (sig) {\n      isUint8Array('signature', sig, 64)\n\n      switch (secp256k1.signatureNormalize(sig)) {\n        case 0:\n          return sig\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n      }\n    },\n\n    signatureExport (sig, output) {\n      isUint8Array('signature', sig, 64)\n      output = getAssertedOutput(output, 72)\n\n      const obj = { output, outputlen: 72 }\n      switch (secp256k1.signatureExport(obj, sig)) {\n        case 0:\n          return output.slice(0, obj.outputlen)\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    signatureImport (sig, output) {\n      isUint8Array('signature', sig)\n      output = getAssertedOutput(output, 64)\n\n      switch (secp256k1.signatureImport(output, sig)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaSign (msg32, seckey, options = {}, output) {\n      isUint8Array('message', msg32, 32)\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.noncefn !== undefined) assert(toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function')\n      output = getAssertedOutput(output, 64)\n\n      const obj = { signature: output, recid: null }\n      switch (secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)) {\n        case 0:\n          return obj\n        case 1:\n          throw new Error(errors.SIGN)\n        case 2:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdsaVerify (sig, msg32, pubkey) {\n      isUint8Array('signature', sig, 64)\n      isUint8Array('message', msg32, 32)\n      isUint8Array('public key', pubkey, [33, 65])\n\n      switch (secp256k1.ecdsaVerify(sig, msg32, pubkey)) {\n        case 0:\n          return true\n        case 3:\n          return false\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.PUBKEY_PARSE)\n      }\n    },\n\n    ecdsaRecover (sig, recid, msg32, compressed = true, output) {\n      isUint8Array('signature', sig, 64)\n      assert(\n        toTypeString(recid) === 'Number' &&\n          recid >= 0 &&\n          recid <= 3,\n        'Expected recovery id to be a Number within interval [0, 3]'\n      )\n      isUint8Array('message', msg32, 32)\n      isCompressed(compressed)\n      output = getAssertedOutput(output, compressed ? 33 : 65)\n\n      switch (secp256k1.ecdsaRecover(output, sig, recid, msg32)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.SIG_PARSE)\n        case 2:\n          throw new Error(errors.RECOVER)\n        case 3:\n          throw new Error(errors.IMPOSSIBLE_CASE)\n      }\n    },\n\n    ecdh (pubkey, seckey, options = {}, output) {\n      isUint8Array('public key', pubkey, [33, 65])\n      isUint8Array('private key', seckey, 32)\n      assert(toTypeString(options) === 'Object', 'Expected options to be an Object')\n      if (options.data !== undefined) isUint8Array('options.data', options.data)\n      if (options.hashfn !== undefined) {\n        assert(toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function')\n        if (options.xbuf !== undefined) isUint8Array('options.xbuf', options.xbuf, 32)\n        if (options.ybuf !== undefined) isUint8Array('options.ybuf', options.ybuf, 32)\n        isUint8Array('output', output)\n      } else {\n        output = getAssertedOutput(output, 32)\n      }\n\n      switch (secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)) {\n        case 0:\n          return output\n        case 1:\n          throw new Error(errors.PUBKEY_PARSE)\n        case 2:\n          throw new Error(errors.ECDH)\n      }\n    }\n  }\n}\n"],"names":["basex","require","module","exports","base58","Buffer","checksumFn","decodeRaw","buffer","payload","slice","checksum","newChecksum","encode","concat","length","decode","string","Error","decodeUnsafe","createHash","bs58checkBase","tmp","update","digest","assert","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","privateKeyVerify","publicKeyCreate","publicKey","readUInt32BE","publicKeyVerify","publicKeyConvert","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","obj","ec","EC","ecparams","curve","BN","n","constructor","loadPublicKey","pubkey","first","xbuf","x","cmp","p","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","subarray","ybuf","x3","redISub","isZero","loadUncompressedPublicKey","savePublicKey","output","point","contextRandomize","seckey","bn","privateKeyNegate","negate","sub","umod","toArrayLike","tweak","iadd","isub","tweaked","privateKeyTweakMul","imul","keyFromPrivate","getPublic","pair","publicKeyNegate","publicKeyCombine","pubkeys","pairs","Array","add","isInfinity","g","mul","publicKeyTweakMul","signatureNormalize","sig","r","s","nh","signatureExport","sigR","sigS","lenR","posR","lenS","posS","outputlen","signatureImport","message","noncefn","_noncefn","counter","nonce","d","canonical","k","pers","recid","recoveryParam","msg32","sigObj","sigr","sigs","ecdsaRecover","recoverPubKey","ecdh","hashfn","scalar","undefined","sha256","getX","toArray","getY","errors","cond","msg","isUint8Array","name","isArray","numbers","join","includes","isCompressed","toTypeString","getAssertedOutput","len","toString","call","seed","compressed","options"],"sourceRoot":""}