{"version":3,"file":"static/js/401.cbfa1459.chunk.js","mappings":"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","sources":["../node_modules/@ethersproject/abi/src.ts/_version.ts","../node_modules/@ethersproject/abi/src.ts/coders/address.ts","../node_modules/@ethersproject/abi/src.ts/coders/anonymous.ts","../node_modules/@ethersproject/abi/src.ts/coders/array.ts","../node_modules/@ethersproject/abi/src.ts/coders/boolean.ts","../node_modules/@ethersproject/abi/src.ts/coders/bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/fixed-bytes.ts","../node_modules/@ethersproject/abi/src.ts/coders/null.ts","../node_modules/@ethersproject/abi/src.ts/coders/number.ts","../node_modules/@ethersproject/abi/src.ts/coders/string.ts","../node_modules/@ethersproject/abi/src.ts/coders/tuple.ts","../node_modules/@ethersproject/abi/src.ts/abi-coder.ts","../node_modules/@ethersproject/abi/src.ts/coders/abstract-coder.ts","../node_modules/@ethersproject/abi/src.ts/fragments.ts","../node_modules/@ethersproject/abi/src.ts/interface.ts","../node_modules/@ethersproject/hash/src.ts/id.ts"],"sourcesContent":["export const version = \"abi/5.5.0\";\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, value: string): number {\n        try {\n            value = getAddress(value)\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    private coder: Coder;\n\n    constructor(coder: Coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n\n    defaultValue(): any {\n        return this.coder.defaultValue();\n    }\n\n    encode(writer: Writer, value: any): number {\n        return this.coder.encode(writer, value);\n    }\n\n    decode(reader: Reader): any {\n        return this.coder.decode(reader);\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\n\nexport function pack(writer: Writer, coders: ReadonlyArray<Coder>, values: Array<any> | { [ name: string ]: any }): number {\n    let arrayValues: Array<any> = null;\n\n    if (Array.isArray(values)) {\n       arrayValues = values;\n\n    } else if (values && typeof(values) === \"object\") {\n        let unique: { [ name: string ]: boolean } = { };\n\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n\n            unique[name] = true;\n\n            return values[name];\n        });\n\n    } else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n\n    let updateFuncs: Array<(baseOffset: number) => void> = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset: number) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n\n        } else {\n            coder.encode(staticWriter, value);\n        }\n    });\n\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\n\nexport function unpack(reader: Reader, coders: Array<Coder>): Result {\n    let values: any = [];\n\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n\n    coders.forEach((coder) => {\n        let value: any = null;\n\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n\n        } else {\n            try {\n                value = coder.decode(reader);\n            } catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) { throw error; }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) { accum[name] = 0; }\n            accum[name]++;\n        }\n        return accum;\n    }, <{ [ name: string ]: number }>{ });\n\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder: Coder, index: number) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) { return; }\n\n        if (name === \"length\") { name = \"_length\"; }\n\n        if (values[name] != null) { return; }\n\n        const value = values[index];\n\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        } else {\n            values[name] = value;\n        }\n    });\n\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n\n    return Object.freeze(values);\n}\n\n\nexport class ArrayCoder extends Coder {\n    readonly coder: Coder;\n    readonly length: number;\n\n    constructor(coder: Coder, length: number, localName: string) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length: \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n\n        this.coder = coder;\n        this.length = length;\n    }\n\n    defaultValue(): Array<any> {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n\n        const result: Array<any> = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n\n    encode(writer: Writer, value: Array<any>): number {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n\n        let count = this.length;\n\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName? (\" \"+ this.localName): \"\"));\n\n        let coders = [];\n        for (let i = 0; i < value.length; i++) { coders.push(this.coder); }\n\n        return pack(writer, coders, value);\n    }\n\n    decode(reader: Reader): any {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) { coders.push(new AnonymousCoder(this.coder)); }\n\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class BooleanCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"bool\", \"bool\", localName, false);\n    }\n\n    defaultValue(): boolean {\n        return false;\n    }\n\n    encode(writer: Writer, value: boolean): number {\n        return writer.writeValue(value ? 1: 0);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.type, !reader.readValue().isZero());\n    }\n}\n\n","\"use strict\";\n\nimport { arrayify, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class DynamicBytesCoder extends Coder {\n    constructor(type: string, localName: string) {\n       super(type, type, localName, true);\n    }\n\n    defaultValue(): string {\n        return \"0x\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        value = arrayify(value);\n        let length = writer.writeValue(value.length);\n        length += writer.writeBytes(value);\n        return length;\n    }\n\n    decode(reader: Reader): any {\n        return reader.readBytes(reader.readValue().toNumber(), true);\n    }\n}\n\nexport class BytesCoder extends DynamicBytesCoder {\n    constructor(localName: string) {\n        super(\"bytes\", localName);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(super.decode(reader)));\n    }\n}\n\n\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\n// @TODO: Merge this with bytes\nexport class FixedBytesCoder extends Coder {\n    readonly size: number;\n\n    constructor(size: number, localName: string) {\n        let name = \"bytes\" + String(size);\n        super(name, name, localName, false);\n        this.size = size;\n    }\n\n    defaultValue(): string {\n        return (\"0x0000000000000000000000000000000000000000000000000000000000000000\").substring(0, 2 + this.size * 2);\n    }\n\n    encode(writer: Writer, value: BytesLike): number {\n        let data = arrayify(value);\n        if (data.length !== this.size) { this._throwError(\"incorrect data length\", value); }\n        return writer.writeBytes(data);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NullCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"null\", \"\", localName, false);\n    }\n\n    defaultValue(): null {\n        return null;\n    }\n\n    encode(writer: Writer, value: any): number {\n        if (value != null) { this._throwError(\"not null\", value); }\n        return writer.writeBytes([ ]);\n    }\n\n    decode(reader: Reader): any {\n        reader.readBytes(0);\n        return reader.coerce(this.name, null);\n    }\n}\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NumberCoder extends Coder {\n    readonly size: number;\n    readonly signed: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        this.size = size;\n        this.signed = signed;\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, value: BigNumberish): number {\n        let v = BigNumber.from(value);\n\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n    }\n\n    decode(reader: Reader): any {\n        let value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n    }\n}\n\n","\"use strict\";\n\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Reader, Writer } from \"./abstract-coder\";\nimport { DynamicBytesCoder } from \"./bytes\";\n\nexport class StringCoder extends DynamicBytesCoder {\n\n    constructor(localName: string) {\n        super(\"string\", localName);\n    }\n\n    defaultValue(): string {\n        return \"\";\n    }\n\n    encode(writer: Writer, value: any): number {\n        return super.encode(writer, toUtf8Bytes(value));\n    }\n\n    decode(reader: Reader): any {\n        return toUtf8String(super.decode(reader));\n    }\n}\n","\"use strict\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\nimport { pack, unpack } from \"./array\";\n\nexport class TupleCoder extends Coder {\n    readonly coders: Array<Coder>;\n\n    constructor(coders: Array<Coder>, localName: string) {\n        let dynamic = false;\n        const types: Array<string> = [];\n        coders.forEach((coder) => {\n            if (coder.dynamic) { dynamic = true; }\n            types.push(coder.type);\n        });\n        const type = (\"tuple(\" + types.join(\",\") + \")\");\n\n        super(\"tuple\", type, localName, dynamic);\n        this.coders = coders;\n    }\n\n    defaultValue(): any {\n        const values: any = [ ];\n        this.coders.forEach((coder) => {\n            values.push(coder.defaultValue());\n        });\n\n        // We only output named properties for uniquely named coders\n        const uniqueNames = this.coders.reduce((accum, coder) => {\n            const name = coder.localName;\n            if (name) {\n                if (!accum[name]) { accum[name] = 0; }\n                accum[name]++;\n            }\n            return accum;\n        }, <{ [ name: string ]: number }>{ });\n\n        // Add named values\n        this.coders.forEach((coder: Coder, index: number) => {\n            let name = coder.localName;\n            if (!name || uniqueNames[name] !== 1) { return; }\n\n            if (name === \"length\") { name = \"_length\"; }\n\n            if (values[name] != null) { return; }\n\n            values[name] = values[index];\n        });\n\n        return Object.freeze(values);\n    }\n\n    encode(writer: Writer, value: Array<any> | { [ name: string ]: any }): number {\n        return pack(writer, this.coders, value);\n    }\n\n    decode(reader: Reader): any {\n        return reader.coerce(this.name, unpack(reader, this.coders));\n    }\n}\n\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        logger.checkNew(new.target, AbiCoder);\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n","\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\n\nexport interface Result extends ReadonlyArray<any> {\n    readonly [key: string]: any;\n}\n\nexport function checkResultErrors(result: Result): Array<{ path: Array<string | number>, error: Error }> {\n    // Find the first error (if any)\n    const errors: Array<{ path: Array<string | number>, error: Error }> = [ ];\n\n    const checkErrors = function(path: Array<string | number>, object: any): void {\n        if (!Array.isArray(object)) { return; }\n        for (let key in object) {\n            const childPath = path.slice();\n            childPath.push(key);\n\n            try {\n                 checkErrors(childPath, object[key]);\n            } catch (error) {\n                errors.push({ path: childPath, error: error });\n            }\n        }\n    }\n    checkErrors([ ], result);\n\n    return errors;\n\n}\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport abstract class Coder {\n\n    // The coder name:\n    //   - address, uint256, tuple, array, etc.\n    readonly name: string;\n\n    // The fully expanded type, including composite types:\n    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.\n    readonly type: string;\n\n    // The localName bound in the signature, in this example it is \"baz\":\n    //   - tuple(address foo, uint bar) baz\n    readonly localName: string;\n\n    // Whether this type is dynamic:\n    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.\n    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)\n    readonly dynamic: boolean;\n\n    constructor(name: string, type: string, localName: string, dynamic: boolean) {\n        // @TODO: defineReadOnly these\n        this.name = name;\n        this.type = type;\n        this.localName = localName;\n        this.dynamic = dynamic;\n    }\n\n    _throwError(message: string, value: any): void {\n        logger.throwArgumentError(message, this.localName, value);\n    }\n\n    abstract encode(writer: Writer, value: any): number;\n    abstract decode(reader: Reader): any;\n\n    abstract defaultValue(): any;\n}\n\nexport class Writer {\n    readonly wordSize: number;\n\n    _data: Array<Uint8Array>;\n    _dataLength: number;\n    _padding: Uint8Array;\n\n    constructor(wordSize?: number) {\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        this._data = [ ];\n        this._dataLength = 0;\n        this._padding = new Uint8Array(wordSize);\n    }\n\n    get data(): string {\n        return hexConcat(this._data);\n    }\n    get length(): number { return this._dataLength; }\n\n    _writeData(data: Uint8Array): number {\n        this._data.push(data);\n        this._dataLength += data.length;\n        return data.length;\n    }\n\n    appendWriter(writer: Writer): number {\n        return this._writeData(concat(writer._data));\n    }\n\n    // Arrayish items; padded on the right to wordSize\n    writeBytes(value: BytesLike): number {\n        let bytes = arrayify(value);\n        const paddingOffset = bytes.length % this.wordSize;\n        if (paddingOffset) {\n            bytes = concat([ bytes, this._padding.slice(paddingOffset) ])\n        }\n        return this._writeData(bytes);\n    }\n\n    _getValue(value: BigNumberish): Uint8Array {\n        let bytes = arrayify(BigNumber.from(value));\n        if (bytes.length > this.wordSize) {\n            logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                length: this.wordSize,\n                offset: bytes.length\n            });\n        }\n        if (bytes.length % this.wordSize) {\n            bytes = concat([ this._padding.slice(bytes.length % this.wordSize), bytes ]);\n        }\n        return bytes;\n    }\n\n    // BigNumberish items; padded on the left to wordSize\n    writeValue(value: BigNumberish): number {\n        return this._writeData(this._getValue(value));\n    }\n\n    writeUpdatableValue(): (value: BigNumberish) => void {\n        const offset = this._data.length;\n        this._data.push(this._padding);\n        this._dataLength += this.wordSize;\n        return (value: BigNumberish) => {\n            this._data[offset] = this._getValue(value);\n        };\n    }\n}\n\nexport class Reader {\n    readonly wordSize: number;\n    readonly allowLoose: boolean;\n\n    readonly _data: Uint8Array;\n    readonly _coerceFunc: CoerceFunc;\n\n    _offset: number;\n\n    constructor(data: BytesLike, wordSize?: number, coerceFunc?: CoerceFunc, allowLoose?: boolean) {\n        defineReadOnly(this, \"_data\", arrayify(data));\n        defineReadOnly(this, \"wordSize\", wordSize || 32);\n        defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n        defineReadOnly(this, \"allowLoose\", allowLoose);\n\n        this._offset = 0;\n    }\n\n    get data(): string { return hexlify(this._data); }\n    get consumed(): number { return this._offset; }\n\n    // The default Coerce function\n    static coerce(name: string, value: any): any {\n        let match = name.match(\"^u?int([0-9]+)$\");\n        if (match && parseInt(match[1]) <= 48) { value =  value.toNumber(); }\n        return value;\n    }\n\n    coerce(name: string, value: any): any {\n        if (this._coerceFunc) { return this._coerceFunc(name, value); }\n        return Reader.coerce(name, value);\n    }\n\n    _peekBytes(offset: number, length: number, loose?: boolean): Uint8Array {\n        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n        if (this._offset + alignedLength > this._data.length) {\n            if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n                alignedLength = length;\n            } else {\n                logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n                    length: this._data.length,\n                    offset: this._offset + alignedLength\n                });\n            }\n        }\n        return this._data.slice(this._offset, this._offset + alignedLength)\n    }\n\n    subReader(offset: number): Reader {\n        return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n\n    readBytes(length: number, loose?: boolean): Uint8Array {\n        let bytes = this._peekBytes(0, length, !!loose);\n        this._offset += bytes.length;\n        // @TODO: Make sure the length..end bytes are all 0?\n        return bytes.slice(0, length);\n    }\n\n    readValue(): BigNumber {\n        return BigNumber.from(this.readBytes(this.wordSize));\n    }\n}\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        logger.checkNew(new.target, Interface);\n\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) {\n                        console.log(error);\n                    }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = eventFragment.inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n","import { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nexport function id(text: string): string {\n    return keccak256(toUtf8Bytes(text));\n}\n"],"names":["version","AddressCoder","localName","writer","value","error","this","_throwError","message","writeValue","reader","readValue","toHexString","AnonymousCoder","coder","name","type","undefined","dynamic","defaultValue","encode","decode","logger","pack","coders","values","arrayValues","Array","isArray","unique","map","throwError","argument","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","forEach","index","dynamicOffset","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","baseReader","subReader","offset","offsetReader","toNumber","code","baseType","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","defaultChild","result","count","checkArgumentCount","_data","coerce","BooleanCoder","isZero","DynamicBytesCoder","writeBytes","readBytes","BytesCoder","FixedBytesCoder","size","String","substring","data","NullCoder","NumberCoder","signed","v","maxUintValue","bounds","mask","gt","lt","add","mul","toTwos","fromTwos","StringCoder","TupleCoder","types","join","paramTypeBytes","RegExp","paramTypeNumber","AbiCoder","coerceFunc","checkNew","param","_getCoder","arrayChildren","arrayLength","components","component","match","parseInt","allowLoose","_getWordSize","_getWriter","loose","_getReader","defaultAbiCoder","checkResultErrors","errors","checkErrors","path","object","key","childPath","slice","Coder","Writer","_dataLength","_padding","Uint8Array","_writeData","bytes","paddingOffset","_getValue","Reader","_offset","_coerceFunc","alignedLength","Math","ceil","_peekBytes","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","indexOf","populate","params","FormatTypes","sighash","minimal","full","json","paramTypeArray","ParamType","constructorGuard","operation","fromObject","_isParamType","indexed","comp","JSON","parse","format","stringify","allowIndexed","fromString","isParamType","verifyType","node","originalParam","newNode","parent","state","allowType","replace","c","allowParams","child","allowName","allowArray","sibling","readArray","parseParamType","parseParams","allowIndex","trim","depth","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","split","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","LogDescription","TransactionDescription","ErrorDescription","Indexed","_isIndexed","BuiltinErrors","signature","reason","wrapAccessError","property","wrap","Interface","fragments","abi","filter","bucket","deploy","functions","events","j","nameOrSignatureOrSighash","getSighash","matching","keys","f","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","constructor","getFunction","getError","_","eventFragment","getEvent","_abiCoder","_encodeParams","_decodeParams","functionFragment","errorArgs","errorName","errorSignature","selector","builtin","method","topics","encodeTopic","id","pop","dataTypes","dataValues","topicHash","expected","nonIndexed","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","tx","args","topic","decodeEventLog","hexData","errorFragment","address","_isInterface","text"],"sourceRoot":""}