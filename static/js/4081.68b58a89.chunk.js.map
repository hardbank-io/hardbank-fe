{"version":3,"file":"static/js/4081.68b58a89.chunk.js","mappings":"+MAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GAAO,IAAM,IAAIC,EAAOP,EAAIK,GAAKC,GAAUE,EAAQD,EAAKC,MAAS,MAAOC,GAAwB,YAAfP,EAAOO,GAAsBF,EAAKG,KAAQT,EAAQO,GAAiBG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAE7P,SAASS,EAAkBC,GAAM,OAAO,WAAc,IAAIC,EAAOC,KAAMC,EAAOC,UAAW,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GAAU,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAAO,SAASd,EAAMK,GAAST,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAAU,SAASJ,EAAOgB,GAAOrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAAQjB,OAAMkB,OAsHjX,UA7GA,SAAmBC,GACjB,IAAIC,EAASD,EAAQC,OACjBC,EAASF,EAAQE,OACjBC,EAAYH,EAAQG,UACpBC,EAAYJ,EAAQI,UACpBC,EAAQL,EAAQK,MAChBC,EAAUN,EAAQM,QAEtB,MAAO,CACLC,KAAMF,GAAS,YACfG,IAHQR,EAAQQ,KATA,6iBAahBF,QAASA,EACTG,OAAQ,WACN,IAAIC,EAAUnB,EAAgC,UAAwB,SAASoB,EAASC,GACtF,IAAIC,EAAeC,EAAWC,EAAUC,EAAUC,EAAWC,EAAYC,EAEzE,OAAO,UAAwB,SAAmBC,GAChD,OACE,OAAQA,EAAUC,KAAOD,EAAUE,MACjC,KAAK,EAEH,OADAF,EAAUE,KAAO,EACV,oCAET,KAAK,EASH,OARAT,EAAgBO,EAAUG,KAC1BT,EAAYD,EAAa,QACzBE,EAAW,IAAID,EAAUb,EAAQC,EAAS,CACxCsB,QAASrB,EACTD,OAAQA,GACQ,IAAdC,OAAkBJ,GAAY0B,EAAAA,EAAAA,GAAYtB,IAC9Ca,EAAWD,EAASW,cACpBT,EAAYL,EAAQK,UAAWC,EAAaN,EAAQM,WAC7CE,EAAUO,OAAO,SAAU,CAChCX,SAAUA,EACVD,SAAUA,EACV,UAAa,CACXR,KAAM,YACNqB,QAAS,WACP,OAAOb,EAASc,KAAKC,QAAQxC,MAAK,SAAUyC,GAE1C,OADAZ,GAAU,EACHY,MAGXC,WAAY,WACV,OAAOjB,EAASc,KAAKI,UAEvBC,QAAS,CACPC,IAAK,WACH,OAAOhB,EAAUD,EAAWF,GAAY3B,QAAQV,YAGpDyD,QAAS,CACPD,IAAK,WACH,OAAO9C,QAAQV,QAAQwB,KAG3BkC,QAAS,CACPF,IAAK,WACH,IAAIG,EAAO/C,EAAgC,UAAwB,SAASgD,IAC1E,OAAO,UAAwB,SAAkBC,GAC/C,OACE,OAAQA,EAASnB,KAAOmB,EAASlB,MAC/B,KAAK,EACH,OAAOkB,EAASb,OAAO,SAAUR,GAAWJ,EAASc,KAAKY,cAAcnD,MAAK,SAAUyC,GACrF,OAAOA,EAAI,GAAKd,EAAUc,EAAI,GAAGW,eAAeC,MAAM1B,EAAU,wBAAwB2B,SAAS,IAAM,SAG3G,KAAK,EACL,IAAK,MACH,OAAOJ,EAASK,UAGrBN,OAOL,OAJA,WACE,OAAOD,EAAKzC,MAAMH,KAAME,YAnBvB,IAyBPkD,UAAW,WACT,OAAO/B,EAASc,KAAKkB,eAK7B,KAAK,EACL,IAAK,MACH,OAAO3B,EAAUyB,UAGtBlC,OAOL,OAJA,SAAgBqC,GACd,OAAOtC,EAAQb,MAAMH,KAAME,YArFvB,GA0FRqD,KAAM,MACNC,SAAS,EACTC,QAAQ,EACR/C,UAAWA","sources":["../node_modules/bnc-onboard/dist/esm/fortmatic-c89a8fe1.js"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport 'regenerator-runtime/runtime';\nimport { n as networkName } from './onboard-a3977b88.js';\nimport 'bignumber.js';\nimport 'bnc-sdk';\nimport 'bowser';\nvar fortmaticIcon = \"\\n  <svg \\n    height=\\\"40\\\" \\n    viewBox=\\\"0 0 40 40\\\" \\n    width=\\\"40\\\" \\n    xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n  >\\n    <path d=\\\"m2744.99995 1155h9.99997 10.00008v9.98139h-10.00008-9.99997-9.99998v9.9814.64001 9.28323.05815 9.9234h-9.99997v-9.9234-.05815-9.28323-.64001-9.9814-9.98139h9.99997zm9.99961 29.88552h-9.94167v-9.92324h19.93595v10.27235c0 2.55359-1.01622 5.00299-2.82437 6.80909-1.80867 1.8061-4.26182 2.82181-6.82018 2.82335h-.34973z\\\" \\n      fill=\\\"#617bff\\\" \\n      fill-rule=\\\"evenodd\\\" \\n      transform=\\\"translate(-2725 -1155)\\\"/>\\n  </svg>\\n\";\n\nfunction fortmatic(options) {\n  var apiKey = options.apiKey,\n      rpcUrl = options.rpcUrl,\n      networkId = options.networkId,\n      preferred = options.preferred,\n      label = options.label,\n      iconSrc = options.iconSrc,\n      svg = options.svg;\n  return {\n    name: label || 'Fortmatic',\n    svg: svg || fortmaticIcon,\n    iconSrc: iconSrc,\n    wallet: function () {\n      var _wallet = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(helpers) {\n        var _yield$import, Fortmatic, instance, provider, BigNumber, getAddress, enabled;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return import('fortmatic');\n\n              case 2:\n                _yield$import = _context2.sent;\n                Fortmatic = _yield$import[\"default\"];\n                instance = new Fortmatic(apiKey, rpcUrl ? {\n                  chainId: networkId,\n                  rpcUrl: rpcUrl\n                } : networkId === 1 ? undefined : networkName(networkId));\n                provider = instance.getProvider();\n                BigNumber = helpers.BigNumber, getAddress = helpers.getAddress;\n                return _context2.abrupt(\"return\", {\n                  provider: provider,\n                  instance: instance,\n                  \"interface\": {\n                    name: 'Fortmatic',\n                    connect: function connect() {\n                      return instance.user.login().then(function (res) {\n                        enabled = true;\n                        return res;\n                      });\n                    },\n                    disconnect: function disconnect() {\n                      return instance.user.logout();\n                    },\n                    address: {\n                      get: function get() {\n                        return enabled ? getAddress(provider) : Promise.resolve();\n                      }\n                    },\n                    network: {\n                      get: function get() {\n                        return Promise.resolve(networkId);\n                      }\n                    },\n                    balance: {\n                      get: function () {\n                        var _get = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                          return regeneratorRuntime.wrap(function _callee$(_context) {\n                            while (1) {\n                              switch (_context.prev = _context.next) {\n                                case 0:\n                                  return _context.abrupt(\"return\", enabled && instance.user.getBalances().then(function (res) {\n                                    return res[0] ? BigNumber(res[0].crypto_amount).times(BigNumber('1000000000000000000')).toString(10) : null;\n                                  }));\n\n                                case 1:\n                                case \"end\":\n                                  return _context.stop();\n                              }\n                            }\n                          }, _callee);\n                        }));\n\n                        function get() {\n                          return _get.apply(this, arguments);\n                        }\n\n                        return get;\n                      }()\n                    },\n                    dashboard: function dashboard() {\n                      return instance.user.settings();\n                    }\n                  }\n                });\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function wallet(_x) {\n        return _wallet.apply(this, arguments);\n      }\n\n      return wallet;\n    }(),\n    type: 'sdk',\n    desktop: true,\n    mobile: true,\n    preferred: preferred\n  };\n}\n\nexport default fortmatic;"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","options","apiKey","rpcUrl","networkId","preferred","label","iconSrc","name","svg","wallet","_wallet","_callee2","helpers","_yield$import","Fortmatic","instance","provider","BigNumber","getAddress","enabled","_context2","prev","next","sent","chainId","networkName","getProvider","abrupt","connect","user","login","res","disconnect","logout","address","get","network","balance","_get","_callee","_context","getBalances","crypto_amount","times","toString","stop","dashboard","settings","_x","type","desktop","mobile"],"sourceRoot":""}