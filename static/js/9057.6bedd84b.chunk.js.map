{"version":3,"file":"static/js/9057.6bedd84b.chunk.js","mappings":"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M,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAC//CC,EAAI,CAAC,GAAM,EAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,EAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,EAAM,IAAM,IAAM,GAAM,EAAM,IAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,EAAM,EAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,IAAM,GAAM,IAAM,EAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,IAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,GAAM,IAAM,GAAM,GAAM,GAAM,EAAM,IAAM,IAAM,IAAM,IAAM,GAAM,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,KAG//CC,EAAK,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,EAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAC1/FC,EAAK,CAAC,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,EAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,SAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAC1/FC,EAAK,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,SAAY,WAAY,UAAY,WAAY,UAAY,WAAY,SAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,EAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAC1/FC,EAAK,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,SAAY,WAAY,UAAY,WAAY,UAAY,WAAY,SAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,EAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAG1/FC,EAAK,CAAC,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,EAAY,UAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAC1/FC,EAAK,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,EAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,SAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,SAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAC1/FC,EAAK,CAAC,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,SAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,EAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAC1/FC,EAAK,CAAC,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,SAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,WAAY,SAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,SAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,EAAY,WAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,UAAY,WAAY,YAG1/FC,EAAK,CAAC,EAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,UAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAC1/FC,EAAK,CAAC,EAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,SAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,WAAY,UAAY,SAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAC1/FC,EAAK,CAAC,EAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,UAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,UAAY,UAAY,WAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,SAAY,UAAY,UAAY,WAAY,UAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,YAC1/FC,EAAK,CAAC,EAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,UAAY,UAAY,UAAY,UAAY,UAAY,SAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,SAAY,UAAY,UAAY,UAAY,UAAY,SAAY,UAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,UAAY,WAAY,UAAY,UAAY,UAAY,UAAY,SAAY,UAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY,WAAY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","sources":["../node_modules/@ethersproject/sha2/src.ts/browser-sha2.ts","../node_modules/@ethersproject/sha2/src.ts/_version.ts","../node_modules/@ethersproject/sha2/src.ts/types.ts","../node_modules/@ethersproject/solidity/src.ts/index.ts","../node_modules/@ethersproject/solidity/src.ts/_version.ts","../node_modules/aes-js/index.js","../node_modules/bech32/index.js","../node_modules/bs58/index.js","../node_modules/@ethersproject/abstract-provider/src.ts/index.ts","../node_modules/@ethersproject/abstract-provider/src.ts/_version.ts","../node_modules/@ethersproject/abstract-signer/src.ts/index.ts","../node_modules/@ethersproject/abstract-signer/src.ts/_version.ts","../node_modules/@ethersproject/contracts/src.ts/index.ts","../node_modules/@ethersproject/contracts/src.ts/_version.ts","../node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts","../node_modules/@ethersproject/hash/src.ts/message.ts","../node_modules/@ethersproject/hash/src.ts/_version.ts","../node_modules/@ethersproject/hash/src.ts/typed-data.ts","../node_modules/@ethersproject/basex/src.ts/index.ts","../node_modules/@ethersproject/pbkdf2/src.ts/browser-pbkdf2.ts","../node_modules/@ethersproject/wordlists/src.ts/wordlist.ts","../node_modules/@ethersproject/wordlists/src.ts/_version.ts","../node_modules/@ethersproject/wordlists/src.ts/lang-en.ts","../node_modules/@ethersproject/wordlists/src.ts/browser-wordlists.ts","../node_modules/@ethersproject/hdnode/src.ts/index.ts","../node_modules/@ethersproject/hdnode/src.ts/_version.ts","../node_modules/@ethersproject/random/src.ts/_version.ts","../node_modules/@ethersproject/random/src.ts/browser-random.ts","../node_modules/@ethersproject/json-wallets/src.ts/_version.ts","../node_modules/@ethersproject/json-wallets/src.ts/utils.ts","../node_modules/@ethersproject/json-wallets/src.ts/crowdsale.ts","../node_modules/@ethersproject/json-wallets/src.ts/inspect.ts","../node_modules/@ethersproject/json-wallets/src.ts/keystore.ts","../node_modules/@ethersproject/json-wallets/src.ts/index.ts","../node_modules/@ethersproject/wallet/src.ts/_version.ts","../node_modules/@ethersproject/wallet/src.ts/index.ts","../node_modules/@ethersproject/constants/src.ts/addresses.ts","../node_modules/@ethersproject/constants/src.ts/hashes.ts","../node_modules/@ethersproject/constants/src.ts/strings.ts","../node_modules/@ethersproject/networks/src.ts/index.ts","../node_modules/@ethersproject/networks/src.ts/_version.ts","../node_modules/@ethersproject/strings/src.ts/idna.ts","../node_modules/@ethersproject/hash/src.ts/namehash.ts","../node_modules/@ethersproject/base64/src.ts/browser-base64.ts","../node_modules/@ethersproject/web/src.ts/_version.ts","../node_modules/@ethersproject/web/src.ts/browser-geturl.ts","../node_modules/@ethersproject/web/src.ts/index.ts","../node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@ethersproject/random/src.ts/shuffle.ts","../node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@ethersproject/providers/src.ts/web3-provider.ts","../node_modules/@ethersproject/providers/src.ts/index.ts","../node_modules/@ethersproject/strings/src.ts/bytes32.ts","../node_modules/@ethersproject/units/src.ts/_version.ts","../node_modules/@ethersproject/units/src.ts/index.ts","../node_modules/ethers/src.ts/_version.ts","../node_modules/ethers/src.ts/ethers.ts","../node_modules/ethers/src.ts/index.ts","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["\"use strict\";\n\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nimport { SupportedAlgorithm } from \"./types\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport function ripemd160(data: BytesLike): string {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha256(data: BytesLike): string {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function sha512(data: BytesLike): string {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\n\nexport function computeHmac(algorithm: SupportedAlgorithm, key: BytesLike, data: BytesLike): string {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n\n    return \"0x\" + hash.hmac((<any>hash)[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n\n","export const version = \"sha2/5.5.0\";\n","export enum SupportedAlgorithm { sha256 = \"sha256\", sha512 = \"sha512\" };\n\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\n\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nfunction _pack(type: string, value: any, isArray?: boolean): Uint8Array {\n    switch(type) {\n        case \"address\":\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\": \"0x00\");\n            if (isArray) { return zeroPad(value, 32); }\n            return arrayify(value);\n    }\n\n    let match =  type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\")\n\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type)\n        }\n\n        if (isArray) { size = 256; }\n\n        value = BigNumber.from(value).toTwos(size);\n\n        return zeroPad(value, size / 8);\n    }\n\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type)\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${ type }`, \"value\", value)\n        }\n        if (isArray) { return arrayify((value + Zeros).substring(0, 66)); }\n        return value;\n    }\n\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${ type }`, \"value\", value)\n        }\n        const result: Array<Uint8Array> = [];\n        value.forEach(function(value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n\n    return logger.throwArgumentError(\"invalid type\", \"type\", type)\n}\n\n// @TODO: Array Enum\n\nexport function pack(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values)\n    }\n    const tight: Array<Uint8Array> = [];\n    types.forEach(function(type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\n\nexport function keccak256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashKeccak256(pack(types, values));\n}\n\nexport function sha256(types: ReadonlyArray<string>, values: ReadonlyArray<any>) {\n    return hashSha256(pack(types, values));\n}\n","export const version = \"solidity/5.5.0\";\n","\"use strict\";\n\n(function(root) {\n\n    function checkInt(value) {\n        return (parseInt(value) === value);\n    }\n\n    function checkInts(arrayish) {\n        if (!checkInt(arrayish.length)) { return false; }\n\n        for (var i = 0; i < arrayish.length; i++) {\n            if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    function coerceArray(arg, copy) {\n\n        // ArrayBuffer view\n        if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {\n\n            if (copy) {\n                if (arg.slice) {\n                    arg = arg.slice();\n                } else {\n                    arg = Array.prototype.slice.call(arg);\n                }\n            }\n\n            return arg;\n        }\n\n        // It's an array; check it is a valid representation of a byte\n        if (Array.isArray(arg)) {\n            if (!checkInts(arg)) {\n                throw new Error('Array contains invalid value: ' + arg);\n            }\n\n            return new Uint8Array(arg);\n        }\n\n        // Something else, but behaves like an array (maybe a Buffer? Arguments?)\n        if (checkInt(arg.length) && checkInts(arg)) {\n            return new Uint8Array(arg);\n        }\n\n        throw new Error('unsupported array-like object');\n    }\n\n    function createArray(length) {\n        return new Uint8Array(length);\n    }\n\n    function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {\n        if (sourceStart != null || sourceEnd != null) {\n            if (sourceArray.slice) {\n                sourceArray = sourceArray.slice(sourceStart, sourceEnd);\n            } else {\n                sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);\n            }\n        }\n        targetArray.set(sourceArray, targetStart);\n    }\n\n\n\n    var convertUtf8 = (function() {\n        function toBytes(text) {\n            var result = [], i = 0;\n            text = encodeURI(text);\n            while (i < text.length) {\n                var c = text.charCodeAt(i++);\n\n                // if it is a % sign, encode the following 2 bytes as a hex value\n                if (c === 37) {\n                    result.push(parseInt(text.substr(i, 2), 16))\n                    i += 2;\n\n                // otherwise, just the actual byte\n                } else {\n                    result.push(c)\n                }\n            }\n\n            return coerceArray(result);\n        }\n\n        function fromBytes(bytes) {\n            var result = [], i = 0;\n\n            while (i < bytes.length) {\n                var c = bytes[i];\n\n                if (c < 128) {\n                    result.push(String.fromCharCode(c));\n                    i++;\n                } else if (c > 191 && c < 224) {\n                    result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));\n                    i += 2;\n                } else {\n                    result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));\n                    i += 3;\n                }\n            }\n\n            return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n    var convertHex = (function() {\n        function toBytes(text) {\n            var result = [];\n            for (var i = 0; i < text.length; i += 2) {\n                result.push(parseInt(text.substr(i, 2), 16));\n            }\n\n            return result;\n        }\n\n        // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html\n        var Hex = '0123456789abcdef';\n\n        function fromBytes(bytes) {\n                var result = [];\n                for (var i = 0; i < bytes.length; i++) {\n                    var v = bytes[i];\n                    result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);\n                }\n                return result.join('');\n        }\n\n        return {\n            toBytes: toBytes,\n            fromBytes: fromBytes,\n        }\n    })();\n\n\n    // Number of rounds by keysize\n    var numberOfRounds = {16: 10, 24: 12, 32: 14}\n\n    // Round constant words\n    var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];\n\n    // S-box and Inverse S-box (S is for Substitution)\n    var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];\n    var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];\n\n    // Transformations for encryption\n    var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];\n    var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];\n    var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];\n    var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];\n\n    // Transformations for decryption\n    var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];\n    var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];\n    var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];\n    var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];\n\n    // Transformations for decryption key expansion\n    var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];\n    var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];\n    var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];\n    var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];\n\n    function convertToInt32(bytes) {\n        var result = [];\n        for (var i = 0; i < bytes.length; i += 4) {\n            result.push(\n                (bytes[i    ] << 24) |\n                (bytes[i + 1] << 16) |\n                (bytes[i + 2] <<  8) |\n                 bytes[i + 3]\n            );\n        }\n        return result;\n    }\n\n    var AES = function(key) {\n        if (!(this instanceof AES)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        Object.defineProperty(this, 'key', {\n            value: coerceArray(key, true)\n        });\n\n        this._prepare();\n    }\n\n\n    AES.prototype._prepare = function() {\n\n        var rounds = numberOfRounds[this.key.length];\n        if (rounds == null) {\n            throw new Error('invalid key size (must be 16, 24 or 32 bytes)');\n        }\n\n        // encryption round keys\n        this._Ke = [];\n\n        // decryption round keys\n        this._Kd = [];\n\n        for (var i = 0; i <= rounds; i++) {\n            this._Ke.push([0, 0, 0, 0]);\n            this._Kd.push([0, 0, 0, 0]);\n        }\n\n        var roundKeyCount = (rounds + 1) * 4;\n        var KC = this.key.length / 4;\n\n        // convert the key into ints\n        var tk = convertToInt32(this.key);\n\n        // copy values into round key arrays\n        var index;\n        for (var i = 0; i < KC; i++) {\n            index = i >> 2;\n            this._Ke[index][i % 4] = tk[i];\n            this._Kd[rounds - index][i % 4] = tk[i];\n        }\n\n        // key expansion (fips-197 section 5.2)\n        var rconpointer = 0;\n        var t = KC, tt;\n        while (t < roundKeyCount) {\n            tt = tk[KC - 1];\n            tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^\n                      (S[(tt >>  8) & 0xFF] << 16) ^\n                      (S[ tt        & 0xFF] <<  8) ^\n                       S[(tt >> 24) & 0xFF]        ^\n                      (rcon[rconpointer] << 24));\n            rconpointer += 1;\n\n            // key expansion (for non-256 bit)\n            if (KC != 8) {\n                for (var i = 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n\n            // key expansion for 256-bit keys is \"slightly different\" (fips-197)\n            } else {\n                for (var i = 1; i < (KC / 2); i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n                tt = tk[(KC / 2) - 1];\n\n                tk[KC / 2] ^= (S[ tt        & 0xFF]        ^\n                              (S[(tt >>  8) & 0xFF] <<  8) ^\n                              (S[(tt >> 16) & 0xFF] << 16) ^\n                              (S[(tt >> 24) & 0xFF] << 24));\n\n                for (var i = (KC / 2) + 1; i < KC; i++) {\n                    tk[i] ^= tk[i - 1];\n                }\n            }\n\n            // copy values into round key arrays\n            var i = 0, r, c;\n            while (i < KC && t < roundKeyCount) {\n                r = t >> 2;\n                c = t % 4;\n                this._Ke[r][c] = tk[i];\n                this._Kd[rounds - r][c] = tk[i++];\n                t++;\n            }\n        }\n\n        // inverse-cipher-ify the decryption round key (fips-197 section 5.3)\n        for (var r = 1; r < rounds; r++) {\n            for (var c = 0; c < 4; c++) {\n                tt = this._Kd[r][c];\n                this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^\n                                  U2[(tt >> 16) & 0xFF] ^\n                                  U3[(tt >>  8) & 0xFF] ^\n                                  U4[ tt        & 0xFF]);\n            }\n        }\n    }\n\n    AES.prototype.encrypt = function(plaintext) {\n        if (plaintext.length != 16) {\n            throw new Error('invalid plaintext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Ke.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(plaintext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Ke[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^\n                        T2[(t[(i + 1) % 4] >> 16) & 0xff] ^\n                        T3[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T4[ t[(i + 3) % 4]        & 0xff] ^\n                        this._Ke[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Ke[rounds][i];\n            result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n    AES.prototype.decrypt = function(ciphertext) {\n        if (ciphertext.length != 16) {\n            throw new Error('invalid ciphertext size (must be 16 bytes)');\n        }\n\n        var rounds = this._Kd.length - 1;\n        var a = [0, 0, 0, 0];\n\n        // convert plaintext to (ints ^ key)\n        var t = convertToInt32(ciphertext);\n        for (var i = 0; i < 4; i++) {\n            t[i] ^= this._Kd[0][i];\n        }\n\n        // apply round transforms\n        for (var r = 1; r < rounds; r++) {\n            for (var i = 0; i < 4; i++) {\n                a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^\n                        T6[(t[(i + 3) % 4] >> 16) & 0xff] ^\n                        T7[(t[(i + 2) % 4] >>  8) & 0xff] ^\n                        T8[ t[(i + 1) % 4]        & 0xff] ^\n                        this._Kd[r][i]);\n            }\n            t = a.slice();\n        }\n\n        // the last round is special\n        var result = createArray(16), tt;\n        for (var i = 0; i < 4; i++) {\n            tt = this._Kd[rounds][i];\n            result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;\n            result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;\n            result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;\n            result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;\n        }\n\n        return result;\n    }\n\n\n    /**\n     *  Mode Of Operation - Electonic Codebook (ECB)\n     */\n    var ModeOfOperationECB = function(key) {\n        if (!(this instanceof ModeOfOperationECB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Electronic Code Block\";\n        this.name = \"ecb\";\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationECB.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n            block = this._aes.encrypt(block);\n            copyArray(block, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationECB.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n            copyArray(block, plaintext, i);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Block Chaining (CBC)\n     */\n    var ModeOfOperationCBC = function(key, iv) {\n        if (!(this instanceof ModeOfOperationCBC)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Block Chaining\";\n        this.name = \"cbc\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastCipherblock = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCBC.prototype.encrypt = function(plaintext) {\n        plaintext = coerceArray(plaintext);\n\n        if ((plaintext.length % 16) !== 0) {\n            throw new Error('invalid plaintext size (must be multiple of 16 bytes)');\n        }\n\n        var ciphertext = createArray(plaintext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < plaintext.length; i += 16) {\n            copyArray(plaintext, block, 0, i, i + 16);\n\n            for (var j = 0; j < 16; j++) {\n                block[j] ^= this._lastCipherblock[j];\n            }\n\n            this._lastCipherblock = this._aes.encrypt(block);\n            copyArray(this._lastCipherblock, ciphertext, i);\n        }\n\n        return ciphertext;\n    }\n\n    ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {\n        ciphertext = coerceArray(ciphertext);\n\n        if ((ciphertext.length % 16) !== 0) {\n            throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');\n        }\n\n        var plaintext = createArray(ciphertext.length);\n        var block = createArray(16);\n\n        for (var i = 0; i < ciphertext.length; i += 16) {\n            copyArray(ciphertext, block, 0, i, i + 16);\n            block = this._aes.decrypt(block);\n\n            for (var j = 0; j < 16; j++) {\n                plaintext[i + j] = block[j] ^ this._lastCipherblock[j];\n            }\n\n            copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);\n        }\n\n        return plaintext;\n    }\n\n\n    /**\n     *  Mode Of Operation - Cipher Feedback (CFB)\n     */\n    var ModeOfOperationCFB = function(key, iv, segmentSize) {\n        if (!(this instanceof ModeOfOperationCFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Cipher Feedback\";\n        this.name = \"cfb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 size)');\n        }\n\n        if (!segmentSize) { segmentSize = 1; }\n\n        this.segmentSize = segmentSize;\n\n        this._shiftRegister = coerceArray(iv, true);\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCFB.prototype.encrypt = function(plaintext) {\n        if ((plaintext.length % this.segmentSize) != 0) {\n            throw new Error('invalid plaintext size (must be segmentSize bytes)');\n        }\n\n        var encrypted = coerceArray(plaintext, true);\n\n        var xorSegment;\n        for (var i = 0; i < encrypted.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n            for (var j = 0; j < this.segmentSize; j++) {\n                encrypted[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return encrypted;\n    }\n\n    ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {\n        if ((ciphertext.length % this.segmentSize) != 0) {\n            throw new Error('invalid ciphertext size (must be segmentSize bytes)');\n        }\n\n        var plaintext = coerceArray(ciphertext, true);\n\n        var xorSegment;\n        for (var i = 0; i < plaintext.length; i += this.segmentSize) {\n            xorSegment = this._aes.encrypt(this._shiftRegister);\n\n            for (var j = 0; j < this.segmentSize; j++) {\n                plaintext[i + j] ^= xorSegment[j];\n            }\n\n            // Shift the register\n            copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);\n            copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);\n        }\n\n        return plaintext;\n    }\n\n    /**\n     *  Mode Of Operation - Output Feedback (OFB)\n     */\n    var ModeOfOperationOFB = function(key, iv) {\n        if (!(this instanceof ModeOfOperationOFB)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Output Feedback\";\n        this.name = \"ofb\";\n\n        if (!iv) {\n            iv = createArray(16);\n\n        } else if (iv.length != 16) {\n            throw new Error('invalid initialation vector size (must be 16 bytes)');\n        }\n\n        this._lastPrecipher = coerceArray(iv, true);\n        this._lastPrecipherIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationOFB.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._lastPrecipherIndex === 16) {\n                this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);\n                this._lastPrecipherIndex = 0;\n            }\n            encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;\n\n\n    /**\n     *  Counter object for CTR common mode of operation\n     */\n    var Counter = function(initialValue) {\n        if (!(this instanceof Counter)) {\n            throw Error('Counter must be instanitated with `new`');\n        }\n\n        // We allow 0, but anything false-ish uses the default 1\n        if (initialValue !== 0 && !initialValue) { initialValue = 1; }\n\n        if (typeof(initialValue) === 'number') {\n            this._counter = createArray(16);\n            this.setValue(initialValue);\n\n        } else {\n            this.setBytes(initialValue);\n        }\n    }\n\n    Counter.prototype.setValue = function(value) {\n        if (typeof(value) !== 'number' || parseInt(value) != value) {\n            throw new Error('invalid counter value (must be an integer)');\n        }\n\n        for (var index = 15; index >= 0; --index) {\n            this._counter[index] = value % 256;\n            value = value >> 8;\n        }\n    }\n\n    Counter.prototype.setBytes = function(bytes) {\n        bytes = coerceArray(bytes, true);\n\n        if (bytes.length != 16) {\n            throw new Error('invalid counter bytes size (must be 16 bytes)');\n        }\n\n        this._counter = bytes;\n    };\n\n    Counter.prototype.increment = function() {\n        for (var i = 15; i >= 0; i--) {\n            if (this._counter[i] === 255) {\n                this._counter[i] = 0;\n            } else {\n                this._counter[i]++;\n                break;\n            }\n        }\n    }\n\n\n    /**\n     *  Mode Of Operation - Counter (CTR)\n     */\n    var ModeOfOperationCTR = function(key, counter) {\n        if (!(this instanceof ModeOfOperationCTR)) {\n            throw Error('AES must be instanitated with `new`');\n        }\n\n        this.description = \"Counter\";\n        this.name = \"ctr\";\n\n        if (!(counter instanceof Counter)) {\n            counter = new Counter(counter)\n        }\n\n        this._counter = counter;\n\n        this._remainingCounter = null;\n        this._remainingCounterIndex = 16;\n\n        this._aes = new AES(key);\n    }\n\n    ModeOfOperationCTR.prototype.encrypt = function(plaintext) {\n        var encrypted = coerceArray(plaintext, true);\n\n        for (var i = 0; i < encrypted.length; i++) {\n            if (this._remainingCounterIndex === 16) {\n                this._remainingCounter = this._aes.encrypt(this._counter._counter);\n                this._remainingCounterIndex = 0;\n                this._counter.increment();\n            }\n            encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];\n        }\n\n        return encrypted;\n    }\n\n    // Decryption is symetric\n    ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;\n\n\n    ///////////////////////\n    // Padding\n\n    // See:https://tools.ietf.org/html/rfc2315\n    function pkcs7pad(data) {\n        data = coerceArray(data, true);\n        var padder = 16 - (data.length % 16);\n        var result = createArray(data.length + padder);\n        copyArray(data, result);\n        for (var i = data.length; i < result.length; i++) {\n            result[i] = padder;\n        }\n        return result;\n    }\n\n    function pkcs7strip(data) {\n        data = coerceArray(data, true);\n        if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }\n\n        var padder = data[data.length - 1];\n        if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }\n\n        var length = data.length - padder;\n        for (var i = 0; i < padder; i++) {\n            if (data[length + i] !== padder) {\n                throw new Error('PKCS#7 invalid padding byte');\n            }\n        }\n\n        var result = createArray(length);\n        copyArray(data, result, 0, 0, length);\n        return result;\n    }\n\n    ///////////////////////\n    // Exporting\n\n\n    // The block cipher\n    var aesjs = {\n        AES: AES,\n        Counter: Counter,\n\n        ModeOfOperation: {\n            ecb: ModeOfOperationECB,\n            cbc: ModeOfOperationCBC,\n            cfb: ModeOfOperationCFB,\n            ofb: ModeOfOperationOFB,\n            ctr: ModeOfOperationCTR\n        },\n\n        utils: {\n            hex: convertHex,\n            utf8: convertUtf8\n        },\n\n        padding: {\n            pkcs7: {\n                pad: pkcs7pad,\n                strip: pkcs7strip\n            }\n        },\n\n        _arrayTest: {\n            coerceArray: coerceArray,\n            createArray: createArray,\n            copyArray: copyArray,\n        }\n    };\n\n\n    // node.js\n    if (typeof exports !== 'undefined') {\n        module.exports = aesjs\n\n    // RequireJS/AMD\n    // http://www.requirejs.org/docs/api.html\n    // https://github.com/amdjs/amdjs-api/wiki/AMD\n    } else if (typeof(define) === 'function' && define.amd) {\n        define(aesjs);\n\n    // Web Browsers\n    } else {\n\n        // If there was an existing library at \"aesjs\" make sure it's still available\n        if (root.aesjs) {\n            aesjs._aesjs = root.aesjs;\n        }\n\n        root.aesjs = aesjs;\n    }\n\n\n})(this);\n","'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { BytesLike, isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { Deferrable, Description, defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { AccessListish, Transaction } from \"@ethersproject/transactions\";\nimport { OnceBlockable } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\n\nexport type TransactionRequest = {\n    to?: string,\n    from?: string,\n    nonce?: BigNumberish,\n\n    gasLimit?: BigNumberish,\n    gasPrice?: BigNumberish,\n\n    data?: BytesLike,\n    value?: BigNumberish,\n    chainId?: number\n\n    type?: number;\n    accessList?: AccessListish;\n\n    maxPriorityFeePerGas?: BigNumberish;\n    maxFeePerGas?: BigNumberish;\n\n    customData?: Record<string, any>;\n}\n\nexport interface TransactionResponse extends Transaction {\n    hash: string;\n\n    // Only if a transaction has been mined\n    blockNumber?: number,\n    blockHash?: string,\n    timestamp?: number,\n\n    confirmations: number,\n\n    // Not optional (as it is in Transaction)\n    from: string;\n\n    // The raw transaction\n    raw?: string,\n\n    // This function waits until the transaction has been mined\n    wait: (confirmations?: number) => Promise<TransactionReceipt>\n};\n\nexport type BlockTag = string | number;\n\nexport interface _Block {\n    hash: string;\n    parentHash: string;\n    number: number;\n\n    timestamp: number;\n    nonce: string;\n    difficulty: number;\n    _difficulty: BigNumber;\n\n    gasLimit: BigNumber;\n    gasUsed: BigNumber;\n\n    miner: string;\n    extraData: string;\n\n    baseFeePerGas?: null | BigNumber;\n}\n\nexport interface Block extends _Block {\n    transactions: Array<string>;\n}\n\nexport interface BlockWithTransactions extends _Block {\n    transactions: Array<TransactionResponse>;\n}\n\n\nexport interface Log {\n    blockNumber: number;\n    blockHash: string;\n    transactionIndex: number;\n\n    removed: boolean;\n\n    address: string;\n    data: string;\n\n    topics: Array<string>;\n\n    transactionHash: string;\n    logIndex: number;\n}\n\nexport interface TransactionReceipt {\n    to: string;\n    from: string;\n    contractAddress: string,\n    transactionIndex: number,\n    root?: string,\n    gasUsed: BigNumber,\n    logsBloom: string,\n    blockHash: string,\n    transactionHash: string,\n    logs: Array<Log>,\n    blockNumber: number,\n    confirmations: number,\n    cumulativeGasUsed: BigNumber,\n    effectiveGasPrice: BigNumber,\n    byzantium: boolean,\n    type: number;\n    status?: number\n};\n\nexport interface FeeData {\n    maxFeePerGas: null | BigNumber;\n    maxPriorityFeePerGas: null | BigNumber;\n    gasPrice: null | BigNumber;\n}\n\nexport interface EventFilter {\n    address?: string;\n    topics?: Array<string | Array<string> | null>;\n}\n\nexport interface Filter extends EventFilter {\n    fromBlock?: BlockTag,\n    toBlock?: BlockTag,\n}\n\nexport interface FilterByBlockHash extends EventFilter {\n    blockHash?: string;\n}\n\n//export type CallTransactionable = {\n//    call(transaction: TransactionRequest): Promise<TransactionResponse>;\n//};\n\nexport abstract class ForkEvent extends Description {\n    readonly expiry: number;\n\n    readonly _isForkEvent?: boolean;\n\n    static isForkEvent(value: any): value is ForkEvent {\n        return !!(value && value._isForkEvent);\n    }\n}\n\nexport class BlockForkEvent extends ForkEvent {\n    readonly blockHash: string;\n\n    readonly _isBlockForkEvent?: boolean;\n\n    constructor(blockHash: string, expiry?: number) {\n        if (!isHexString(blockHash, 32)) {\n            logger.throwArgumentError(\"invalid blockHash\", \"blockHash\", blockHash);\n        }\n\n        super({\n            _isForkEvent: true,\n            _isBlockForkEvent: true,\n            expiry: (expiry || 0),\n            blockHash: blockHash\n        });\n    }\n}\n\nexport class TransactionForkEvent extends ForkEvent {\n    readonly hash: string;\n\n    readonly _isTransactionOrderForkEvent?: boolean;\n\n    constructor(hash: string, expiry?: number) {\n        if (!isHexString(hash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"hash\", hash);\n        }\n\n        super({\n            _isForkEvent: true,\n            _isTransactionForkEvent: true,\n            expiry: (expiry || 0),\n            hash: hash\n        });\n    }\n}\n\nexport class TransactionOrderForkEvent extends ForkEvent {\n    readonly beforeHash: string;\n    readonly afterHash: string;\n\n    constructor(beforeHash: string, afterHash: string, expiry?: number) {\n        if (!isHexString(beforeHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"beforeHash\", beforeHash);\n        }\n        if (!isHexString(afterHash, 32)) {\n            logger.throwArgumentError(\"invalid transaction hash\", \"afterHash\", afterHash);\n        }\n\n        super({\n            _isForkEvent: true,\n            _isTransactionOrderForkEvent: true,\n            expiry: (expiry || 0),\n            beforeHash: beforeHash,\n            afterHash: afterHash\n        });\n    }\n}\n\nexport type EventType = string | Array<string | Array<string>> | EventFilter | ForkEvent;\n\nexport type Listener = (...args: Array<any>) => void;\n\n///////////////////////////////\n// Exported Abstracts\nexport abstract class Provider implements OnceBlockable {\n\n    // Network\n    abstract getNetwork(): Promise<Network>;\n\n    // Latest State\n    abstract getBlockNumber(): Promise<number>;\n    abstract getGasPrice(): Promise<BigNumber>;\n    async getFeeData(): Promise<FeeData> {\n        const { block, gasPrice } = await resolveProperties({\n            block: this.getBlock(\"latest\"),\n            gasPrice: this.getGasPrice().catch((error) => {\n                // @TODO: Why is this now failing on Calaveras?\n                //console.log(error);\n                return null;\n            })\n        });\n\n        let maxFeePerGas = null, maxPriorityFeePerGas = null;\n\n        if (block && block.baseFeePerGas) {\n            // We may want to compute this more accurately in the future,\n            // using the formula \"check if the base fee is correct\".\n            // See: https://eips.ethereum.org/EIPS/eip-1559\n            maxPriorityFeePerGas = BigNumber.from(\"2500000000\");\n            maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);\n        }\n\n        return { maxFeePerGas, maxPriorityFeePerGas, gasPrice };\n    }\n\n    // Account\n    abstract getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber>;\n    abstract getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number>;\n    abstract getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> ;\n    abstract getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\n\n    // Execution\n    abstract sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse>;\n    abstract call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;\n    abstract estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber>;\n\n    // Queries\n    abstract getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block>;\n    abstract getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions>;\n    abstract getTransaction(transactionHash: string): Promise<TransactionResponse>;\n    abstract getTransactionReceipt(transactionHash: string): Promise<TransactionReceipt>;\n\n    // Bloom-filter Queries\n    abstract getLogs(filter: Filter): Promise<Array<Log>>;\n\n    // ENS\n    abstract resolveName(name: string | Promise<string>): Promise<null | string>;\n    abstract lookupAddress(address: string | Promise<string>): Promise<null | string>;\n\n    // Event Emitter (ish)\n    abstract on(eventName: EventType, listener: Listener): Provider;\n    abstract once(eventName: EventType, listener: Listener): Provider;\n    abstract emit(eventName: EventType, ...args: Array<any>): boolean\n    abstract listenerCount(eventName?: EventType): number;\n    abstract listeners(eventName?: EventType): Array<Listener>;\n    abstract off(eventName: EventType, listener?: Listener): Provider;\n    abstract removeAllListeners(eventName?: EventType): Provider;\n\n    // Alias for \"on\"\n    addListener(eventName: EventType, listener: Listener): Provider {\n        return this.on(eventName, listener);\n    }\n\n    // Alias for \"off\"\n    removeListener(eventName: EventType, listener: Listener): Provider {\n        return this.off(eventName, listener);\n    }\n\n    // @TODO: This *could* be implemented here, but would pull in events...\n    abstract waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt>;\n\n    readonly _isProvider: boolean;\n\n    constructor() {\n        logger.checkAbstract(new.target, Provider);\n        defineReadOnly(this, \"_isProvider\", true);\n    }\n\n    static isProvider(value: any): value is Provider {\n        return !!(value && value._isProvider);\n    }\n\n/*\n    static getResolver(network: Network, callable: CallTransactionable, namehash: string): string {\n        // No ENS...\n        if (!network.ensAddress) {\n            errors.throwError(\n                \"network does support ENS\",\n                errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // Not a namehash\n        if (!isHexString(namehash, 32)) {\n            errors.throwArgumentError(\"invalid name hash\", \"namehash\", namehash);\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        let data = \"0x0178b8bf\" + namehash.substring(2);\n        let transaction = { to: network.ensAddress, data: data };\n\n        return provider.call(transaction).then((data) => {\n            return provider.formatter.callAddress(data);\n        });\n    }\n\n    static resolveNamehash(network: Network, callable: CallTransactionable, namehash: string): string {\n        return this.getResolver(network, callable, namehash).then((resolverAddress) => {\n            if (!resolverAddress) { return null; }\n\n            // keccak256(\"addr(bytes32)\")\n            let data = \"0x3b3b57de\" + namehash(name).substring(2);\n            let transaction = { to: resolverAddress, data: data };\n            return callable.call(transaction).then((data) => {\n                return this.formatter.callAddress(data);\n            });\n\n        })\n    }\n*/\n}\n","export const version = \"abstract-provider/5.5.1\";\n","\"use strict\";\n\nimport { BlockTag, FeeData, Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst allowedTransactionKeys: Array<string> = [\n    \"accessList\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\n\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n\n// EIP-712 Typed Data\n// See: https://eips.ethereum.org/EIPS/eip-712\n\nexport interface TypedDataDomain {\n    name?: string;\n    version?: string;\n    chainId?: BigNumberish;\n    verifyingContract?: string;\n    salt?: BytesLike;\n};\n\nexport interface TypedDataField {\n    name: string;\n    type: string;\n};\n\n// Sub-classes of Signer may optionally extend this interface to indicate\n// they have a private key available synchronously\nexport interface ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n}\n\n// Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\n\n// @TODO: This is a temporary measure to preserve backwards compatibility\n//        In v6, the method on TypedDataSigner will be added to Signer\nexport interface TypedDataSigner {\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\nexport abstract class Signer {\n    readonly provider?: Provider;\n\n    ///////////////////\n    // Sub-classes MUST implement these\n\n    // Returns the checksum address\n    abstract getAddress(): Promise<string>\n\n    // Returns the signed prefixed-message. This MUST treat:\n    // - Bytes as a binary message\n    // - string as a UTF8-message\n    // i.e. \"0x1234\" is a SIX (6) byte string, NOT 2 bytes of data\n    abstract signMessage(message: Bytes | string): Promise<string>;\n\n    // Signs a transaction and returns the fully serialized, signed transaction.\n    // The EXACT transaction MUST be signed, and NO additional properties to be added.\n    // - This MAY throw if signing transactions is not supports, but if\n    //   it does, sentTransaction MUST be overridden.\n    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\n\n    // Returns a new instance of the Signer, connected to provider.\n    // This MAY throw if changing providers is not supported.\n    abstract connect(provider: Provider): Signer;\n\n    readonly _isSigner: boolean;\n\n\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n\n\n    ///////////////////\n    // Sub-classes MAY override these\n\n    async getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n        this._checkProvider(\"getBalance\");\n        return await this.provider.getBalance(this.getAddress(), blockTag);\n    }\n\n    async getTransactionCount(blockTag?: BlockTag): Promise<number> {\n        this._checkProvider(\"getTransactionCount\");\n        return await this.provider.getTransactionCount(this.getAddress(), blockTag);\n    }\n\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        this._checkProvider(\"estimateGas\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.estimateGas(tx);\n    }\n\n    // Populates \"from\" if unspecified, and calls with the transaction\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string> {\n        this._checkProvider(\"call\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.call(tx, blockTag);\n    }\n\n    // Populates all fields in a transaction, signs it and sends it to the network\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        this._checkProvider(\"sendTransaction\");\n        const tx = await this.populateTransaction(transaction);\n        const signedTx = await this.signTransaction(tx);\n        return await this.provider.sendTransaction(signedTx);\n    }\n\n    async getChainId(): Promise<number> {\n        this._checkProvider(\"getChainId\");\n        const network = await this.provider.getNetwork();\n        return network.chainId;\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        this._checkProvider(\"getGasPrice\");\n        return await this.provider.getGasPrice();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        this._checkProvider(\"getFeeData\");\n        return await this.provider.getFeeData();\n    }\n\n\n    async resolveName(name: string): Promise<string> {\n        this._checkProvider(\"resolveName\");\n        return await this.provider.resolveName(name);\n    }\n\n\n\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest> {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n\n        const tx = shallowCopy(transaction);\n\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n\n        return tx;\n    }\n\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    async populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest> {\n\n        const tx: Deferrable<TransactionRequest> = await resolveProperties(this.checkTransaction(transaction))\n\n        if (tx.to != null) {\n            tx.to = Promise.resolve(tx.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n\n            // Prevent this error from causing an UnhandledPromiseException\n            tx.to.catch((error) => {  });\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n            logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n        } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n            logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n        }\n\n        if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            tx.type = 2;\n\n        } else if (tx.type === 0 || tx.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // Populate missing gasPrice\n            if (tx.gasPrice == null) { tx.gasPrice = this.getGasPrice(); }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await this.getFeeData();\n\n            if (tx.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    tx.type = 2;\n\n                    if (tx.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = tx.gasPrice;\n                        delete tx.gasPrice;\n                        tx.maxFeePerGas = gasPrice;\n                        tx.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n                        if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                        if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    if (hasEip1559) {\n                        logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"populateTransaction\"\n                        });\n                    }\n\n                    // Populate missing fee data\n                    if (tx.gasPrice == null) { tx.gasPrice = feeData.gasPrice; }\n\n                    // Explicitly set untyped transaction to legacy\n                    tx.type = 0;\n\n                } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n\n            } else if (tx.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n            }\n        }\n\n        if (tx.nonce == null) { tx.nonce = this.getTransactionCount(\"pending\"); }\n\n        if (tx.gasLimit == null) {\n            tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                if (forwardErrors.indexOf(error.code) >= 0) {\n                    throw error;\n                }\n\n                return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                    error: error,\n                    tx: tx\n                });\n            });\n        }\n\n        if (tx.chainId == null) {\n            tx.chainId = this.getChainId();\n        } else {\n            tx.chainId = Promise.all([\n                Promise.resolve(tx.chainId),\n                this.getChainId()\n            ]).then((results) => {\n                if (results[1] !== 0 && results[0] !== results[1]) {\n                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                }\n                return results[0];\n            });\n        }\n\n        return await resolveProperties(tx);\n    }\n\n\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n    _checkProvider(operation?: string): void {\n        if (!this.provider) { logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: (operation || \"_checkProvider\") });\n        }\n    }\n\n    static isSigner(value: any): value is Signer {\n        return !!(value && value._isSigner);\n    }\n}\n\nexport class VoidSigner extends Signer implements TypedDataSigner {\n    readonly address: string;\n\n    constructor(address: string, provider?: Provider) {\n        logger.checkNew(new.target, VoidSigner);\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    _fail(message: string, operation: string): Promise<any> {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n\n    signMessage(message: Bytes | string): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n\n    connect(provider: Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n}\n\n","export const version = \"abstract-signer/5.5.0\";\n","\"use strict\";\n\nimport { checkResultErrors, EventFragment, Fragment, FunctionFragment, Indexed, Interface, JsonFragment, LogDescription, ParamType, Result } from \"@ethersproject/abi\";\nimport { Block, BlockTag, Filter, FilterByBlockHash, Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, deepCopy, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, AccessListish } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\nexport interface Overrides {\n    gasLimit?: BigNumberish | Promise<BigNumberish>;\n    gasPrice?: BigNumberish | Promise<BigNumberish>;\n    maxFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    maxPriorityFeePerGas?: BigNumberish | Promise<BigNumberish>;\n    nonce?: BigNumberish | Promise<BigNumberish>;\n    type?: number;\n    accessList?: AccessListish;\n    customData?: Record<string, any>;\n};\n\nexport interface PayableOverrides extends Overrides {\n    value?: BigNumberish | Promise<BigNumberish>;\n}\n\nexport interface CallOverrides extends PayableOverrides {\n    blockTag?: BlockTag | Promise<BlockTag>;\n    from?: string | Promise<string>;\n}\n\n// @TODO: Better hierarchy with: (in v6)\n//  - abstract-provider:TransactionRequest\n//  - transactions:Transaction\n//  - transaction:UnsignedTransaction\n\nexport interface PopulatedTransaction {\n    to?: string;\n    from?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumber;\n    gasPrice?: BigNumber;\n\n    data?: string;\n    value?: BigNumber;\n    chainId?: number;\n\n    type?: number;\n    accessList?: AccessList;\n\n    maxFeePerGas?: BigNumber;\n    maxPriorityFeePerGas?: BigNumber;\n\n    customData?: Record<string, any>;\n};\n\nexport type EventFilter = {\n    address?: string;\n    topics?: Array<string|Array<string>>;\n};\n\n\nexport type ContractFunction<T = any> = (...args: Array<any>) => Promise<T>;\n\n\n// The (n + 1)th parameter passed to contract event callbacks\nexport interface Event extends Log {\n\n    // The event name\n    event?: string;\n\n    // The event signature\n    eventSignature?: string;\n\n    // The parsed arguments to the event\n    args?: Result;\n\n    // If parsing the arguments failed, this is the error\n    decodeError?: Error;\n\n    // A function that can be used to decode event data and topics\n    decode?: (data: string, topics?: Array<string>) => any;\n\n    // A function that will remove the listener responsible for this event (if any)\n    removeListener: () => void;\n\n    // Get blockchain details about this event's block and transaction\n    getBlock: () => Promise<Block>;\n    getTransaction: () => Promise<TransactionResponse>;\n    getTransactionReceipt: () => Promise<TransactionReceipt>;\n}\n\nexport interface ContractReceipt extends TransactionReceipt {\n    events?: Array<Event>;\n}\n\nexport interface ContractTransaction extends TransactionResponse {\n    wait(confirmations?: number): Promise<ContractReceipt>;\n}\n\n///////////////////////////////\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, from: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true,\n    customData: true\n}\n\nasync function resolveName(resolver: Signer | Provider, nameOrPromise: string | Promise<string>): Promise<string> {\n    const name = await nameOrPromise;\n\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid address or ENS name\", \"name\", name);\n    }\n\n    // If it is already an address, just use it (after adding checksum)\n    try {\n        return getAddress(name);\n    } catch (error) { }\n\n    if (!resolver) {\n        logger.throwError(\"a provider or signer is needed to resolve ENS names\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\"\n        });\n    }\n\n    const address = await resolver.resolveName(name);\n\n    if (address == null) {\n        logger.throwArgumentError(\"resolver or addr is not configured for ENS name\", \"name\", name);\n    }\n\n    return address;\n}\n\n// Recursively replaces ENS names with promises to resolve the name and resolves all properties\nasync function resolveAddresses(resolver: Signer | Provider, value: any, paramType: ParamType | Array<ParamType>): Promise<any> {\n    if (Array.isArray(paramType)) {\n        return await Promise.all(paramType.map((paramType, index) => {\n            return resolveAddresses(\n                resolver,\n                ((Array.isArray(value)) ? value[index]: value[paramType.name]),\n                paramType\n            );\n        }));\n    }\n\n    if (paramType.type === \"address\") {\n        return await resolveName(resolver, value);\n    }\n\n    if (paramType.type === \"tuple\") {\n        return await resolveAddresses(resolver, value, paramType.components);\n    }\n\n    if (paramType.baseType === \"array\") {\n        if (!Array.isArray(value)) {\n            return Promise.reject(logger.makeError(\"invalid value for array\", Logger.errors.INVALID_ARGUMENT, {\n                argument: \"value\",\n                value\n            }));\n        }\n        return await Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));\n    }\n\n    return value;\n}\n\nasync function populateTransaction(contract: Contract, fragment: FunctionFragment, args: Array<any>): Promise<PopulatedTransaction> {\n    // If an extra argument is given, it is overrides\n    let overrides: CallOverrides = { };\n    if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n        overrides = shallowCopy(args.pop());\n    }\n\n    // Make sure the parameter count matches\n    logger.checkArgumentCount(args.length, fragment.inputs.length, \"passed to contract\");\n\n    // Populate \"from\" override (allow promises)\n    if (contract.signer) {\n        if (overrides.from) {\n            // Contracts with a Signer are from the Signer's frame-of-reference;\n            // but we allow overriding \"from\" if it matches the signer\n            overrides.from = resolveProperties({\n                override: resolveName(contract.signer, overrides.from),\n                signer: contract.signer.getAddress()\n            }).then(async (check) => {\n                if (getAddress(check.signer) !== check.override) {\n                    logger.throwError(\"Contract with a Signer cannot override from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"overrides.from\"\n                    });\n                }\n\n                return check.override;\n            });\n\n        } else {\n            overrides.from = contract.signer.getAddress();\n        }\n\n    } else if (overrides.from) {\n        overrides.from = resolveName(contract.provider, overrides.from);\n\n    //} else {\n        // Contracts without a signer can override \"from\", and if\n        // unspecified the zero address is used\n        //overrides.from = AddressZero;\n    }\n\n    // Wait for all dependencies to be resolved (prefer the signer over the provider)\n    const resolved = await resolveProperties({\n        args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),\n        address: contract.resolvedAddress,\n        overrides: (resolveProperties(overrides) || { })\n    });\n\n    // The ABI coded transaction\n    const data = contract.interface.encodeFunctionData(fragment, resolved.args);\n    const tx: PopulatedTransaction = {\n      data: data,\n      to: resolved.address\n    };\n\n    // Resolved Overrides\n    const ro = resolved.overrides;\n\n    // Populate simple overrides\n    if (ro.nonce != null) { tx.nonce = BigNumber.from(ro.nonce).toNumber(); }\n    if (ro.gasLimit != null) { tx.gasLimit = BigNumber.from(ro.gasLimit); }\n    if (ro.gasPrice != null) { tx.gasPrice = BigNumber.from(ro.gasPrice); }\n    if (ro.maxFeePerGas != null) { tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas); }\n    if (ro.maxPriorityFeePerGas != null) { tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas); }\n    if (ro.from != null) { tx.from = ro.from; }\n\n    if (ro.type != null) { tx.type = ro.type; }\n    if (ro.accessList != null) { tx.accessList = accessListify(ro.accessList); }\n\n    // If there was no \"gasLimit\" override, but the ABI specifies a default, use it\n    if (tx.gasLimit == null && fragment.gas != null) {\n        // Compute the intrinsic gas cost for this transaction\n        // @TODO: This is based on the yellow paper as of Petersburg; this is something\n        // we may wish to parameterize in v6 as part of the Network object. Since this\n        // is always a non-nil to address, we can ignore G_create, but may wish to add\n        // similar logic to the ContractFactory.\n        let intrinsic = 21000;\n        const bytes = arrayify(data);\n        for (let i = 0; i < bytes.length; i++) {\n            intrinsic += 4;\n            if (bytes[i]) { intrinsic += 64; }\n        }\n        tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);\n    }\n\n    // Populate \"value\" override\n    if (ro.value) {\n        const roValue = BigNumber.from(ro.value);\n        if (!roValue.isZero() && !fragment.payable) {\n            logger.throwError(\"non-payable method cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"overrides.value\",\n                value: overrides.value\n            });\n        }\n        tx.value = roValue;\n    }\n\n    if (ro.customData) {\n        tx.customData = shallowCopy(ro.customData);\n    }\n\n    // Remove the overrides\n    delete overrides.nonce;\n    delete overrides.gasLimit;\n    delete overrides.gasPrice;\n    delete overrides.from;\n    delete overrides.value;\n\n    delete overrides.type;\n    delete overrides.accessList;\n\n    delete overrides.maxFeePerGas;\n    delete overrides.maxPriorityFeePerGas;\n\n    delete overrides.customData;\n\n    // Make sure there are no stray overrides, which may indicate a\n    // typo or using an unsupported key.\n    const leftovers = Object.keys(overrides).filter((key) => ((<any>overrides)[key] != null));\n    if (leftovers.length) {\n        logger.throwError(`cannot override ${ leftovers.map((l) => JSON.stringify(l)).join(\",\") }`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"overrides\",\n            overrides: leftovers\n        });\n    }\n\n    return tx;\n}\n\n\nfunction buildPopulate(contract: Contract, fragment: FunctionFragment): ContractFunction<PopulatedTransaction> {\n    return function(...args: Array<any>): Promise<PopulatedTransaction> {\n        return populateTransaction(contract, fragment, args);\n    };\n}\n\nfunction buildEstimate(contract: Contract, fragment: FunctionFragment): ContractFunction<BigNumber> {\n    const signerOrProvider = (contract.signer || contract.provider);\n    return async function(...args: Array<any>): Promise<BigNumber> {\n        if (!signerOrProvider) {\n            logger.throwError(\"estimate require a provider or signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"estimateGas\"\n            })\n        }\n\n        const tx = await populateTransaction(contract, fragment, args);\n        return await signerOrProvider.estimateGas(tx);\n    };\n}\n\nfunction addContractWait(contract: Contract, tx: TransactionResponse) {\n    const wait = tx.wait.bind(tx);\n    tx.wait = (confirmations?: number) => {\n        return wait(confirmations).then((receipt: ContractReceipt) => {\n            receipt.events = receipt.logs.map((log) => {\n                let event: Event = (<Event>deepCopy(log));\n                let parsed: LogDescription = null;\n                try {\n                    parsed = contract.interface.parseLog(log);\n                } catch (e){ }\n\n                // Successfully parsed the event log; include it\n                if (parsed) {\n                    event.args = parsed.args;\n                    event.decode = (data: BytesLike, topics?: Array<any>) => {\n                        return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);\n                    };\n                    event.event = parsed.name;\n                    event.eventSignature = parsed.signature;\n                }\n\n                // Useful operations\n                event.removeListener = () => { return contract.provider; }\n                event.getBlock = () => {\n                    return contract.provider.getBlock(receipt.blockHash);\n                }\n                event.getTransaction = () => {\n                    return contract.provider.getTransaction(receipt.transactionHash);\n                }\n                event.getTransactionReceipt = () => {\n                    return Promise.resolve(receipt);\n                }\n\n                return event;\n            });\n\n            return receipt;\n        });\n    };\n}\n\nfunction buildCall(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    const signerOrProvider = (contract.signer || contract.provider);\n\n    return async function(...args: Array<any>): Promise<any> {\n        // Extract the \"blockTag\" override if present\n        let blockTag = undefined;\n        if (args.length === fragment.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            const overrides = shallowCopy(args.pop());\n            if (overrides.blockTag != null) {\n                blockTag = await overrides.blockTag;\n            }\n            delete overrides.blockTag;\n            args.push(overrides);\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed(blockTag);\n        }\n\n        // Call a node and get the result\n        const tx = await populateTransaction(contract, fragment, args);\n        const result = await signerOrProvider.call(tx, blockTag);\n\n        try {\n            let value = contract.interface.decodeFunctionResult(fragment, result);\n            if (collapseSimple && fragment.outputs.length === 1) {\n                value = value[0];\n            }\n            return value;\n\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) {\n                error.address = contract.address;\n                error.args = args;\n                error.transaction = tx;\n            }\n            throw error;\n         }\n    };\n}\n\nfunction buildSend(contract: Contract, fragment: FunctionFragment): ContractFunction<TransactionResponse> {\n    return async function(...args: Array<any>): Promise<TransactionResponse> {\n        if (!contract.signer) {\n            logger.throwError(\"sending a transaction requires a signer\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"sendTransaction\"\n            })\n        }\n\n        // If the contract was just deployed, wait until it is mined\n        if (contract.deployTransaction != null) {\n            await contract._deployed();\n        }\n\n        const txRequest = await populateTransaction(contract, fragment, args);\n\n        const tx = await contract.signer.sendTransaction(txRequest);\n\n        // Tweak the tx.wait so the receipt has extra properties\n        addContractWait(contract, tx);\n\n        return tx;\n    };\n}\n\nfunction buildDefault(contract: Contract, fragment: FunctionFragment, collapseSimple: boolean): ContractFunction {\n    if (fragment.constant) {\n        return buildCall(contract, fragment, collapseSimple);\n    }\n    return buildSend(contract, fragment);\n}\n\nfunction getEventTag(filter: EventFilter): string {\n    if (filter.address && (filter.topics == null || filter.topics.length === 0)) {\n        return \"*\";\n    }\n\n    return (filter.address || \"*\") + \"@\" + (filter.topics ? filter.topics.map((topic) => {\n        if (Array.isArray(topic)) {\n            return topic.join(\"|\");\n        }\n        return topic;\n    }).join(\":\"): \"\");\n}\n\nclass RunningEvent {\n    readonly tag: string;\n    readonly filter: EventFilter;\n    private _listeners: Array<{ listener: Listener, once: boolean }>;\n\n    constructor(tag: string, filter: EventFilter) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"filter\", filter);\n        this._listeners = [ ];\n    }\n\n    addListener(listener: Listener, once: boolean): void {\n        this._listeners.push({ listener: listener, once: once });\n    }\n\n    removeListener(listener: Listener): void {\n        let done = false;\n        this._listeners = this._listeners.filter((item) => {\n            if (done || item.listener !== listener) { return true; }\n            done = true;\n            return false;\n        });\n    }\n\n    removeAllListeners(): void {\n        this._listeners = [];\n    }\n\n    listeners(): Array<Listener> {\n        return this._listeners.map((i) => i.listener);\n    }\n\n    listenerCount(): number {\n        return this._listeners.length;\n    }\n\n    run(args: Array<any>): number {\n        const listenerCount = this.listenerCount();\n        this._listeners = this._listeners.filter((item) => {\n\n            const argsCopy = args.slice();\n\n            // Call the callback in the next event loop\n            setTimeout(() => {\n                item.listener.apply(this, argsCopy);\n            }, 0);\n\n            // Reschedule it if it not \"once\"\n            return !(item.once);\n        });\n\n        return listenerCount;\n    }\n\n    prepareEvent(event: Event): void {\n    }\n\n    // Returns the array that will be applied to an emit\n    getEmit(event: Event): Array<any> {\n        return [ event ];\n    }\n}\n\nclass ErrorRunningEvent extends RunningEvent {\n    constructor() {\n        super(\"error\", null);\n    }\n}\n\n\n// @TODO Fragment should inherit Wildcard? and just override getEmit?\n//       or have a common abstract super class, with enough constructor\n//       options to configure both.\n\n// A Fragment Event will populate all the properties that Wildcard\n// will, and additionally dereference the arguments when emitting\nclass FragmentRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n    readonly fragment: EventFragment;\n\n    constructor(address: string, contractInterface: Interface, fragment: EventFragment, topics?: Array<string|Array<string>>) {\n        const filter: EventFilter = {\n            address: address\n        }\n\n        let topic = contractInterface.getEventTopic(fragment);\n        if (topics) {\n            if (topic !== topics[0]) { logger.throwArgumentError(\"topic mismatch\", \"topics\", topics); }\n            filter.topics = topics.slice();\n        } else {\n            filter.topics = [ topic ];\n        }\n\n        super(getEventTag(filter), filter);\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n        defineReadOnly(this, \"fragment\", fragment);\n    }\n\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        event.event = this.fragment.name;\n        event.eventSignature = this.fragment.format();\n\n        event.decode = (data: BytesLike, topics?: Array<string>) => {\n            return this.interface.decodeEventLog(this.fragment, data, topics);\n        };\n\n        try {\n            event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);\n        } catch (error) {\n            event.args = null;\n            event.decodeError = error;\n        }\n    }\n\n    getEmit(event: Event): Array<any> {\n        const errors = checkResultErrors(event.args);\n        if (errors.length) { throw errors[0].error; }\n\n        const args = (event.args || []).slice();\n        args.push(event);\n        return args;\n    }\n}\n\n// A Wildcard Event will attempt to populate:\n//  - event            The name of the event name\n//  - eventSignature   The full signature of the event\n//  - decode           A function to decode data and topics\n//  - args             The decoded data and topics\nclass WildcardRunningEvent extends RunningEvent {\n    readonly address: string;\n    readonly interface: Interface;\n\n    constructor(address: string, contractInterface: Interface) {\n        super(\"*\", { address: address });\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"interface\", contractInterface);\n    }\n\n    prepareEvent(event: Event): void {\n        super.prepareEvent(event);\n\n        try {\n            const parsed = this.interface.parseLog(event);\n            event.event = parsed.name;\n            event.eventSignature = parsed.signature;\n\n            event.decode = (data: BytesLike, topics?: Array<string>) => {\n                return this.interface.decodeEventLog(parsed.eventFragment, data, topics);\n            };\n\n            event.args = parsed.args;\n        } catch (error) {\n            // No matching event\n        }\n    }\n}\n\nexport type ContractInterface = string | ReadonlyArray<Fragment | JsonFragment | string> | Interface;\n\ntype InterfaceFunc = (contractInterface: ContractInterface) => Interface;\n\n\nexport class BaseContract {\n    readonly address: string;\n    readonly interface: Interface;\n\n    readonly signer: Signer;\n    readonly provider: Provider;\n\n    readonly functions: { [ name: string ]: ContractFunction };\n\n    readonly callStatic: { [ name: string ]: ContractFunction };\n    readonly estimateGas: { [ name: string ]: ContractFunction<BigNumber> };\n    readonly populateTransaction: { [ name: string ]: ContractFunction<PopulatedTransaction> };\n\n    readonly filters: { [ name: string ]: (...args: Array<any>) => EventFilter };\n\n    // This will always be an address. This will only differ from\n    // address if an ENS name was used in the constructor\n    readonly resolvedAddress: Promise<string>;\n\n    // This is only set if the contract was created with a call to deploy\n    readonly deployTransaction: TransactionResponse;\n\n    _deployedPromise: Promise<Contract>;\n\n    // A list of RunningEvents to track listeners for each event tag\n    _runningEvents: { [ eventTag: string ]: RunningEvent };\n\n    // Wrapped functions to call emit and allow deregistration from the provider\n    _wrappedEmits: { [ eventTag: string ]: (...args: Array<any>) => void };\n\n    constructor(addressOrName: string, contractInterface: ContractInterface, signerOrProvider?: Signer | Provider) {\n        logger.checkNew(new.target, Contract);\n\n        // @TODO: Maybe still check the addressOrName looks like a valid address or name?\n        //address = getAddress(address);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n\n        if (signerOrProvider == null) {\n            defineReadOnly(this, \"provider\", null);\n            defineReadOnly(this, \"signer\", null);\n        } else if (Signer.isSigner(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider.provider || null);\n            defineReadOnly(this, \"signer\", signerOrProvider);\n        } else if (Provider.isProvider(signerOrProvider)) {\n            defineReadOnly(this, \"provider\", signerOrProvider);\n            defineReadOnly(this, \"signer\", null);\n        } else {\n            logger.throwArgumentError(\"invalid signer or provider\", \"signerOrProvider\", signerOrProvider);\n        }\n\n        defineReadOnly(this, \"callStatic\", { });\n        defineReadOnly(this, \"estimateGas\", { });\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"populateTransaction\", { });\n\n        defineReadOnly(this, \"filters\", { });\n\n        {\n            const uniqueFilters: { [ name: string ]: Array<string> } = { };\n            Object.keys(this.interface.events).forEach((eventSignature) => {\n                const event = this.interface.events[eventSignature];\n                defineReadOnly(this.filters, eventSignature, (...args: Array<any>) => {\n                    return {\n                        address: this.address,\n                        topics: this.interface.encodeFilterTopics(event, args)\n                   }\n                });\n                if (!uniqueFilters[event.name]) { uniqueFilters[event.name] = [ ]; }\n                uniqueFilters[event.name].push(eventSignature);\n            });\n\n            Object.keys(uniqueFilters).forEach((name) => {\n                const filters = uniqueFilters[name];\n                if (filters.length === 1) {\n                    defineReadOnly(this.filters, name, this.filters[filters[0]]);\n                } else {\n                    logger.warn(`Duplicate definition of ${ name } (${ filters.join(\", \")})`);\n                }\n            });\n        }\n\n        defineReadOnly(this, \"_runningEvents\", { });\n        defineReadOnly(this, \"_wrappedEmits\", { });\n\n        if (addressOrName == null) {\n            logger.throwArgumentError(\"invalid contract address or ENS name\", \"addressOrName\", addressOrName);\n        }\n\n        defineReadOnly(this, \"address\", addressOrName);\n        if (this.provider) {\n            defineReadOnly(this, \"resolvedAddress\", resolveName(this.provider, addressOrName));\n        } else {\n            try {\n                defineReadOnly(this, \"resolvedAddress\", Promise.resolve(getAddress(addressOrName)));\n            } catch (error) {\n                // Without a provider, we cannot use ENS names\n                logger.throwError(\"provider is required to use ENS name as contract address\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"new Contract\"\n                });\n            }\n        }\n\n        const uniqueNames: { [ name: string ]: Array<string> } = { };\n        const uniqueSignatures: { [ signature: string ]: boolean } = { };\n        Object.keys(this.interface.functions).forEach((signature) => {\n            const fragment = this.interface.functions[signature];\n\n            // Check that the signature is unique; if not the ABI generation has\n            // not been cleaned or may be incorrectly generated\n            if (uniqueSignatures[signature]) {\n                logger.warn(`Duplicate ABI entry for ${ JSON.stringify(signature) }`);\n                return;\n            }\n            uniqueSignatures[signature] = true;\n\n            // Track unique names; we only expose bare named functions if they\n            // are ambiguous\n            {\n                const name = fragment.name;\n                if (!uniqueNames[`%${ name }`]) { uniqueNames[`%${ name }`] = [ ]; }\n                uniqueNames[`%${ name }`].push(signature);\n            }\n\n            if ((<Contract>this)[signature] == null) {\n                defineReadOnly<any, any>(this, signature, buildDefault(this, fragment, true));\n            }\n\n            // We do not collapse simple calls on this bucket, which allows\n            // frameworks to safely use this without introspection as well as\n            // allows decoding error recovery.\n            if (this.functions[signature] == null) {\n                defineReadOnly(this.functions, signature, buildDefault(this, fragment, false));\n            }\n\n            if (this.callStatic[signature] == null) {\n                defineReadOnly(this.callStatic, signature, buildCall(this, fragment, true));\n            }\n\n            if (this.populateTransaction[signature] == null) {\n                defineReadOnly(this.populateTransaction, signature, buildPopulate(this, fragment));\n            }\n\n            if (this.estimateGas[signature] == null) {\n                defineReadOnly(this.estimateGas, signature, buildEstimate(this, fragment));\n            }\n        });\n\n        Object.keys(uniqueNames).forEach((name) => {\n            // Ambiguous names to not get attached as bare names\n            const signatures = uniqueNames[name];\n            if (signatures.length > 1) { return; }\n\n            // Strip off the leading \"%\" used for prototype protection\n            name = name.substring(1);\n\n            const signature = signatures[0];\n\n            // If overwriting a member property that is null, swallow the error\n            try {\n                if ((<Contract>this)[name] == null) {\n                    defineReadOnly(<Contract>this, name, (<Contract>this)[signature]);\n                }\n            } catch (e) { }\n\n            if (this.functions[name] == null) {\n                defineReadOnly(this.functions, name, this.functions[signature]);\n            }\n\n            if (this.callStatic[name] == null) {\n                defineReadOnly(this.callStatic, name, this.callStatic[signature]);\n            }\n\n            if (this.populateTransaction[name] == null) {\n                defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);\n            }\n\n            if (this.estimateGas[name] == null) {\n                defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);\n            }\n        });\n    }\n\n    static getContractAddress(transaction: { from: string, nonce: BigNumberish }): string {\n        return getContractAddress(transaction);\n    }\n\n    static getInterface(contractInterface: ContractInterface): Interface {\n        if (Interface.isInterface(contractInterface)) {\n            return contractInterface;\n        }\n        return new Interface(contractInterface);\n    }\n\n    // @TODO: Allow timeout?\n    deployed(): Promise<Contract> {\n        return this._deployed();\n    }\n\n    _deployed(blockTag?: BlockTag): Promise<Contract> {\n        if (!this._deployedPromise) {\n\n            // If we were just deployed, we know the transaction we should occur in\n            if (this.deployTransaction) {\n                this._deployedPromise = this.deployTransaction.wait().then(() => {\n                    return this;\n                });\n\n            } else {\n                // @TODO: Once we allow a timeout to be passed in, we will wait\n                // up to that many blocks for getCode\n\n                // Otherwise, poll for our code to be deployed\n                this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {\n                    if (code === \"0x\") {\n                        logger.throwError(\"contract not deployed\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            contractAddress: this.address,\n                            operation: \"getDeployed\"\n                        });\n                    }\n                    return this;\n                });\n            }\n        }\n\n        return this._deployedPromise;\n    }\n\n    // @TODO:\n    // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>\n\n    // @TODO:\n    // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>\n\n    fallback(overrides?: TransactionRequest): Promise<TransactionResponse> {\n        if (!this.signer) {\n            logger.throwError(\"sending a transactions require a signer\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"sendTransaction(fallback)\" })\n        }\n\n        const tx: Deferrable<TransactionRequest> = shallowCopy(overrides || {});\n\n        [\"from\", \"to\"].forEach(function(key) {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        tx.to = this.resolvedAddress;\n        return this.deployed().then(() => {\n            return this.signer.sendTransaction(tx);\n        });\n    }\n\n    // Reconnect to a different signer or provider\n    connect(signerOrProvider: Signer | Provider | string): Contract {\n        if (typeof(signerOrProvider) === \"string\") {\n            signerOrProvider = new VoidSigner(signerOrProvider, this.provider);\n        }\n\n        const contract = new (<{ new(...args: any[]): Contract }>(this.constructor))(this.address, this.interface, signerOrProvider);\n        if (this.deployTransaction) {\n            defineReadOnly(contract, \"deployTransaction\", this.deployTransaction);\n        }\n        return contract;\n    }\n\n    // Re-attach to a different on-chain instance of this contract\n    attach(addressOrName: string): Contract {\n        return new (<{ new(...args: any[]): Contract }>(this.constructor))(addressOrName, this.interface, this.signer || this.provider);\n    }\n\n    static isIndexed(value: any): value is Indexed {\n        return Indexed.isIndexed(value);\n    }\n\n    private _normalizeRunningEvent(runningEvent: RunningEvent): RunningEvent {\n        // Already have an instance of this event running; we can re-use it\n        if (this._runningEvents[runningEvent.tag]) {\n            return this._runningEvents[runningEvent.tag];\n         }\n         return runningEvent\n    }\n\n    private _getRunningEvent(eventName: EventFilter | string): RunningEvent {\n        if (typeof(eventName) === \"string\") {\n\n            // Listen for \"error\" events (if your contract has an error event, include\n            // the full signature to bypass this special event keyword)\n            if (eventName === \"error\") {\n                return this._normalizeRunningEvent(new ErrorRunningEvent());\n            }\n\n            // Listen for any event that is registered\n            if (eventName === \"event\") {\n                return this._normalizeRunningEvent(new RunningEvent(\"event\", null));\n            }\n\n            // Listen for any event\n            if (eventName === \"*\") {\n                return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n            }\n\n            // Get the event Fragment (throws if ambiguous/unknown event)\n            const fragment = this.interface.getEvent(eventName)\n            return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));\n        }\n\n        // We have topics to filter by...\n        if (eventName.topics && eventName.topics.length > 0) {\n\n            // Is it a known topichash? (throws if no matching topichash)\n            try {\n                const topic = eventName.topics[0];\n                if (typeof(topic) !== \"string\") {\n                    throw new Error(\"invalid topic\"); // @TODO: May happen for anonymous events\n                }\n                const fragment = this.interface.getEvent(topic);\n                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));\n            } catch (error) { }\n\n            // Filter by the unknown topichash\n            const filter: EventFilter = {\n                address: this.address,\n                topics: eventName.topics\n            }\n\n            return this._normalizeRunningEvent(new RunningEvent(getEventTag(filter), filter));\n        }\n\n        return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));\n    }\n\n    _checkRunningEvents(runningEvent: RunningEvent): void {\n        if (runningEvent.listenerCount() === 0) {\n            delete this._runningEvents[runningEvent.tag];\n\n            // If we have a poller for this, remove it\n            const emit = this._wrappedEmits[runningEvent.tag];\n            if (emit && runningEvent.filter) {\n                this.provider.off(runningEvent.filter, emit);\n                delete this._wrappedEmits[runningEvent.tag];\n            }\n        }\n    }\n\n    // Subclasses can override this to gracefully recover\n    // from parse errors if they wish\n    _wrapEvent(runningEvent: RunningEvent, log: Log, listener: Listener): Event {\n        const event = <Event>deepCopy(log);\n\n        event.removeListener = () => {\n            if (!listener) { return; }\n            runningEvent.removeListener(listener);\n            this._checkRunningEvents(runningEvent);\n        };\n\n        event.getBlock = () => { return this.provider.getBlock(log.blockHash); }\n        event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); }\n        event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); }\n\n        // This may throw if the topics and data mismatch the signature\n        runningEvent.prepareEvent(event);\n\n        return event;\n    }\n\n    private _addEventListener(runningEvent: RunningEvent, listener: Listener, once: boolean): void {\n        if (!this.provider) {\n            logger.throwError(\"events require a provider or a signer with a provider\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"once\" })\n        }\n\n        runningEvent.addListener(listener, once);\n\n        // Track this running event and its listeners (may already be there; but no hard in updating)\n        this._runningEvents[runningEvent.tag] = runningEvent;\n\n        // If we are not polling the provider, start polling\n        if (!this._wrappedEmits[runningEvent.tag]) {\n            const wrappedEmit = (log: Log) => {\n                let event = this._wrapEvent(runningEvent, log, listener);\n\n                // Try to emit the result for the parameterized event...\n                if (event.decodeError == null) {\n                    try {\n                        const args = runningEvent.getEmit(event);\n                        this.emit(runningEvent.filter, ...args);\n                    } catch (error) {\n                        event.decodeError = error.error;\n                    }\n                }\n\n                // Always emit \"event\" for fragment-base events\n                if (runningEvent.filter != null) {\n                    this.emit(\"event\", event);\n                }\n\n                // Emit \"error\" if there was an error\n                if (event.decodeError != null) {\n                    this.emit(\"error\", event.decodeError, event);\n                }\n            };\n            this._wrappedEmits[runningEvent.tag] = wrappedEmit;\n\n            // Special events, like \"error\" do not have a filter\n            if (runningEvent.filter != null) {\n                this.provider.on(runningEvent.filter, wrappedEmit);\n            }\n        }\n    }\n\n    queryFilter(event: EventFilter, fromBlockOrBlockhash?: BlockTag | string, toBlock?: BlockTag): Promise<Array<Event>> {\n        const runningEvent = this._getRunningEvent(event);\n        const filter = shallowCopy(runningEvent.filter);\n\n        if (typeof(fromBlockOrBlockhash) === \"string\" && isHexString(fromBlockOrBlockhash, 32)) {\n            if (toBlock != null) {\n                logger.throwArgumentError(\"cannot specify toBlock with blockhash\", \"toBlock\", toBlock);\n            }\n            (<FilterByBlockHash>filter).blockHash = fromBlockOrBlockhash;\n        } else {\n             (<Filter>filter).fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash: 0);\n             (<Filter>filter).toBlock = ((toBlock != null) ? toBlock: \"latest\");\n        }\n\n        return this.provider.getLogs(filter).then((logs) => {\n            return logs.map((log) => this._wrapEvent(runningEvent, log, null));\n        });\n    }\n\n    on(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, false);\n        return this;\n    }\n\n    once(event: EventFilter | string, listener: Listener): this {\n        this._addEventListener(this._getRunningEvent(event), listener, true);\n        return this;\n    }\n\n    emit(eventName: EventFilter | string, ...args: Array<any>): boolean {\n        if (!this.provider) { return false; }\n\n        const runningEvent = this._getRunningEvent(eventName);\n        const result = (runningEvent.run(args) > 0);\n\n        // May have drained all the \"once\" events; check for living events\n        this._checkRunningEvents(runningEvent);\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventFilter | string): number {\n        if (!this.provider) { return 0; }\n        if (eventName == null) {\n            return Object.keys(this._runningEvents).reduce((accum, key) => {\n                return accum + this._runningEvents[key].listenerCount();\n            }, 0);\n        }\n        return this._getRunningEvent(eventName).listenerCount();\n    }\n\n    listeners(eventName?: EventFilter | string): Array<Listener> {\n        if (!this.provider) { return []; }\n\n        if (eventName == null) {\n            const result: Array<Listener> = [ ];\n            for (let tag in this._runningEvents) {\n                this._runningEvents[tag].listeners().forEach((listener) => {\n                    result.push(listener)\n                });\n            }\n            return result;\n        }\n\n        return this._getRunningEvent(eventName).listeners();\n    }\n\n    removeAllListeners(eventName?: EventFilter | string): this {\n        if (!this.provider) { return this; }\n\n        if (eventName == null) {\n            for (const tag in this._runningEvents) {\n                const runningEvent = this._runningEvents[tag];\n                runningEvent.removeAllListeners();\n                this._checkRunningEvents(runningEvent);\n            }\n            return this;\n        }\n\n        // Delete any listeners\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeAllListeners();\n        this._checkRunningEvents(runningEvent);\n\n        return this;\n    }\n\n    off(eventName: EventFilter | string, listener: Listener): this {\n        if (!this.provider) { return this; }\n        const runningEvent = this._getRunningEvent(eventName);\n        runningEvent.removeListener(listener);\n        this._checkRunningEvents(runningEvent);\n        return this;\n    }\n\n    removeListener(eventName: EventFilter | string, listener: Listener): this {\n        return this.off(eventName, listener);\n    }\n\n}\n\nexport class Contract extends BaseContract {\n    // The meta-class properties\n    readonly [ key: string ]: ContractFunction | any;\n}\n\nexport class ContractFactory {\n\n    readonly interface: Interface;\n    readonly bytecode: string;\n    readonly signer: Signer;\n\n    constructor(contractInterface: ContractInterface, bytecode: BytesLike | { object: string }, signer?: Signer) {\n\n        let bytecodeHex: string = null;\n\n        if (typeof(bytecode) === \"string\") {\n            bytecodeHex = bytecode;\n        } else if (isBytes(bytecode)) {\n            bytecodeHex = hexlify(bytecode);\n        } else if (bytecode && typeof(bytecode.object) === \"string\") {\n            // Allow the bytecode object from the Solidity compiler\n            bytecodeHex = (<any>bytecode).object;\n        } else {\n            // Crash in the next verification step\n            bytecodeHex = \"!\";\n        }\n\n        // Make sure it is 0x prefixed\n        if (bytecodeHex.substring(0, 2) !== \"0x\") { bytecodeHex = \"0x\" + bytecodeHex; }\n\n        // Make sure the final result is valid bytecode\n        if (!isHexString(bytecodeHex) || (bytecodeHex.length % 2)) {\n            logger.throwArgumentError(\"invalid bytecode\", \"bytecode\", bytecode);\n        }\n\n        // If we have a signer, make sure it is valid\n        if (signer && !Signer.isSigner(signer)) {\n            logger.throwArgumentError(\"invalid signer\", \"signer\", signer);\n        }\n\n        defineReadOnly(this, \"bytecode\", bytecodeHex);\n        defineReadOnly(this, \"interface\", getStatic<InterfaceFunc>(new.target, \"getInterface\")(contractInterface));\n        defineReadOnly(this, \"signer\", signer || null);\n    }\n\n    // @TODO: Future; rename to populateTransaction?\n    getDeployTransaction(...args: Array<any>): TransactionRequest {\n        let tx: TransactionRequest = { };\n\n        // If we have 1 additional argument, we allow transaction overrides\n        if (args.length === this.interface.deploy.inputs.length + 1 && typeof(args[args.length - 1]) === \"object\") {\n            tx = shallowCopy(args.pop());\n            for (const key in tx) {\n                if (!allowedTransactionKeys[key]) {\n                    throw new Error(\"unknown transaction override \" + key);\n                }\n            }\n        }\n\n        // Do not allow these to be overridden in a deployment transaction\n        [\"data\", \"from\", \"to\"].forEach((key) => {\n            if ((<any>tx)[key] == null) { return; }\n            logger.throwError(\"cannot override \" + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key })\n        });\n\n        if (tx.value) {\n            const value = BigNumber.from(tx.value);\n            if (!value.isZero() && !this.interface.deploy.payable) {\n                logger.throwError(\"non-payable constructor cannot override value\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"overrides.value\",\n                    value: tx.value\n                });\n            }\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Set the data to the bytecode + the encoded constructor arguments\n        tx.data = hexlify(concat([\n            this.bytecode,\n            this.interface.encodeDeploy(args)\n        ]));\n\n        return tx\n    }\n\n    async deploy(...args: Array<any>): Promise<Contract> {\n\n        let overrides: any = { };\n\n        // If 1 extra parameter was passed in, it contains overrides\n        if (args.length === this.interface.deploy.inputs.length + 1) {\n            overrides = args.pop();\n        }\n\n        // Make sure the call matches the constructor signature\n        logger.checkArgumentCount(args.length, this.interface.deploy.inputs.length, \" in Contract constructor\");\n\n        // Resolve ENS names and promises in the arguments\n        const params = await resolveAddresses(this.signer, args, this.interface.deploy.inputs);\n        params.push(overrides);\n\n        // Get the deployment transaction (with optional overrides)\n        const unsignedTx = this.getDeployTransaction(...params);\n\n        // Send the deployment transaction\n        const tx = await this.signer.sendTransaction(unsignedTx);\n\n        const address = getStatic<(tx: TransactionResponse) => string>(this.constructor, \"getContractAddress\")(tx);\n        const contract = getStatic<(address: string, contractInterface: ContractInterface, signer?: Signer) => Contract>(this.constructor, \"getContract\")(address, this.interface, this.signer);\n\n        // Add the modified wait that wraps events\n        addContractWait(contract, tx);\n\n        defineReadOnly(contract, \"deployTransaction\", tx);\n        return contract;\n    }\n\n    attach(address: string): Contract {\n        return (<any>(this.constructor)).getContract(address, this.interface, this.signer);\n    }\n\n    connect(signer: Signer) {\n        return new (<{ new(...args: any[]): ContractFactory }>(this.constructor))(this.interface, this.bytecode, signer);\n    }\n\n    static fromSolidity(compilerOutput: any, signer?: Signer): ContractFactory {\n        if (compilerOutput == null) {\n            logger.throwError(\"missing compiler output\", Logger.errors.MISSING_ARGUMENT, { argument: \"compilerOutput\" });\n        }\n\n        if (typeof(compilerOutput) === \"string\") {\n            compilerOutput = JSON.parse(compilerOutput);\n        }\n\n        const abi = compilerOutput.abi;\n\n        let bytecode: any = null;\n        if (compilerOutput.bytecode) {\n            bytecode = compilerOutput.bytecode;\n        } else if (compilerOutput.evm && compilerOutput.evm.bytecode) {\n            bytecode = compilerOutput.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, signer);\n    }\n\n    static getInterface(contractInterface: ContractInterface) {\n        return Contract.getInterface(contractInterface);\n    }\n\n    static getContractAddress(tx: { from: string, nonce: BytesLike | BigNumber | number }): string {\n        return getContractAddress(tx);\n    }\n\n    static getContract(address: string, contractInterface: ContractInterface, signer?: Signer): Contract {\n        return new Contract(address, contractInterface, signer);\n    }\n}\n","export const version = \"contracts/5.5.0\";\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BigNumber, BigNumberish, isBigNumberish } from \"./bignumber\";\n\nconst _constructorGuard = { };\n\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message: string, fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value !== undefined) { params.value = value; }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) { zeros += zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals: BigNumberish): string {\n\n    if (typeof(decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        } catch (e) { }\n    }\n\n    if (typeof(decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value: BigNumberish, decimals?: string | BigNumberish): string {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n\n    const negative = value.lt(Zero);\n    if (negative) { value = value.mul(NegativeOne); }\n\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) { fraction = \"0\" + fraction; }\n\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n\n    if (negative) { value = \"-\" + value; }\n\n    return value;\n}\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    if (typeof(value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) { value = value.substring(1); }\n\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) { whole = \"0\"; }\n    if (!fraction) { fraction = \"0\"; }\n\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") { fraction = \"0\"; }\n\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) { fraction += \"0\"; }\n\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\n    if (negative) { wei = wei.mul(NegativeOne); }\n\n    return wei;\n}\n\n\nexport class FixedFormat {\n    readonly signed: boolean;\n    readonly width: number;\n    readonly decimals: number;\n    readonly name: string;\n    readonly _multiplier: string;\n\n    constructor(constructorGuard: any, signed: boolean, width: number, decimals: number) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n\n        this.name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n        this._multiplier = getMultiplier(decimals);\n\n        Object.freeze(this);\n    }\n\n    static from(value: any): FixedFormat {\n        if (value instanceof FixedFormat) { return value; }\n\n        if (typeof(value) === \"number\") {\n            value = `fixed128x${value}`\n        }\n\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n\n        if (typeof(value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) { logger.throwArgumentError(\"invalid fixed format\", \"format\", value); }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key: string, type: string, defaultValue: any): any => {\n                if (value[key] == null) { return defaultValue; }\n                if (typeof(value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            }\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\n\nexport class FixedNumber {\n    readonly format: FixedFormat;\n    readonly _hex: string;\n    readonly _value: string;\n\n    readonly _isFixedNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string, value: string, format?: FixedFormat) {\n        logger.checkNew(new.target, FixedNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n\n        this._isFixedNumber = true;\n\n        Object.freeze(this);\n    }\n\n    _checkFormat(other: FixedNumber): void {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n\n    addUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n\n    subUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n\n    mulUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n\n    divUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n\n    floor(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    ceiling(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    // @TODO: Support other rounding algorithms\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n\n        if (comps[1].length <= decimals) { return this; }\n\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n\n    isZero(): boolean {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n\n    isNegative(): boolean {\n        return (this._value[0] === \"-\");\n    }\n\n    toString(): string { return this._value; }\n\n    toHexString(width?: number): string {\n        if (width == null) { return this._hex; }\n        if (width % 8) { logger.throwArgumentError(\"invalid byte width\", \"width\", width); }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    toFormat(format: FixedFormat | string): FixedNumber {\n        return FixedNumber.fromString(this._value, format);\n    }\n\n\n    static fromValue(value: BigNumber, decimals?: BigNumberish, format?: FixedFormat | string | number): FixedNumber {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n\n        if (decimals == null) { decimals = 0; }\n        if (format == null) { format = \"fixed\"; }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n\n\n    static fromString(value: string, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        const numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        let hex: string = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static fromBytes(value: BytesLike, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) { numeric = numeric.fromTwos(fixedFormat.width); }\n\n        const hex = numeric.toTwos((fixedFormat.signed ? 0: 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static from(value: any, format?: FixedFormat | string | number) {\n        if (typeof(value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n\n    static isFixedNumber(value: any): value is FixedNumber {\n        return !!(value && value._isFixedNumber);\n    }\n}\n\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n","import { Bytes, concat } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\n\nexport function hashMessage(message: Bytes | string): string {\n    if (typeof(message) === \"string\") { message = toUtf8Bytes(message); }\n    return keccak256(concat([\n        toUtf8Bytes(messagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n\n","export const version = \"hash/5.5.0\";\n","import { TypedDataDomain, TypedDataField } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, hexConcat, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { id } from \"./id\";\n\nconst padding = new Uint8Array(32);\npadding.fill(0);\n\nconst NegativeOne: BigNumber = BigNumber.from(-1);\nconst Zero: BigNumber = BigNumber.from(0);\nconst One: BigNumber = BigNumber.from(1);\nconst MaxUint256: BigNumber = BigNumber.from(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nfunction hexPadRight(value: BytesLike) {\n    const bytes = arrayify(value);\n    const padOffset = bytes.length % 32\n    if (padOffset) {\n        return hexConcat([ bytes, padding.slice(padOffset) ]);\n    }\n    return hexlify(bytes);\n}\n\nconst hexTrue = hexZeroPad(One.toHexString(), 32);\nconst hexFalse = hexZeroPad(Zero.toHexString(), 32);\n\nconst domainFieldTypes: Record<string, string> = {\n    name: \"string\",\n    version: \"string\",\n    chainId: \"uint256\",\n    verifyingContract: \"address\",\n    salt: \"bytes32\"\n};\n\nconst domainFieldNames: Array<string> = [\n    \"name\", \"version\", \"chainId\", \"verifyingContract\", \"salt\"\n];\n\nfunction checkString(key: string): (value: any) => string {\n    return function (value: any){\n        if (typeof(value) !== \"string\") {\n            logger.throwArgumentError(`invalid domain value for ${ JSON.stringify(key) }`, `domain.${ key }`, value);\n        }\n        return value;\n    }\n}\n\nconst domainChecks: Record<string, (value: any) => any> = {\n    name: checkString(\"name\"),\n    version: checkString(\"version\"),\n    chainId: function(value: any) {\n        try {\n            return BigNumber.from(value).toString()\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value for \"chainId\"`, \"domain.chainId\", value);\n    },\n    verifyingContract: function(value: any) {\n        try {\n            return getAddress(value).toLowerCase();\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"verifyingContract\"`, \"domain.verifyingContract\", value);\n    },\n    salt: function(value: any) {\n        try {\n            const bytes = arrayify(value);\n            if (bytes.length !== 32) { throw new Error(\"bad length\"); }\n            return hexlify(bytes);\n        } catch (error) { }\n        return logger.throwArgumentError(`invalid domain value \"salt\"`, \"domain.salt\", value);\n    }\n}\n\nfunction getBaseEncoder(type: string): (value: any) => string {\n    // intXX and uintXX\n    {\n        const match = type.match(/^(u?)int(\\d*)$/);\n        if (match) {\n            const signed = (match[1] === \"\");\n\n            const width = parseInt(match[2] || \"256\");\n            if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {\n                logger.throwArgumentError(\"invalid numeric width\", \"type\", type);\n            }\n\n            const boundsUpper = MaxUint256.mask(signed ? (width - 1): width);\n            const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne): Zero;\n\n            return function(value: BigNumberish) {\n                const v = BigNumber.from(value);\n\n                if (v.lt(boundsLower) || v.gt(boundsUpper)) {\n                    logger.throwArgumentError(`value out-of-bounds for ${ type }`, \"value\", value);\n                }\n\n                return hexZeroPad(v.toTwos(256).toHexString(), 32);\n            };\n        }\n    }\n\n    // bytesXX\n    {\n        const match = type.match(/^bytes(\\d+)$/);\n        if (match) {\n            const width = parseInt(match[1]);\n            if (width === 0 || width > 32 || match[1] !== String(width)) {\n                logger.throwArgumentError(\"invalid bytes width\", \"type\", type);\n            }\n\n            return function(value: BytesLike) {\n                const bytes = arrayify(value);\n                if (bytes.length !== width) {\n                    logger.throwArgumentError(`invalid length for ${ type }`, \"value\", value);\n                }\n                return hexPadRight(value);\n            };\n        }\n    }\n\n    switch (type) {\n        case \"address\": return function(value: string) {\n            return hexZeroPad(getAddress(value), 32);\n        };\n        case \"bool\": return function(value: boolean) {\n            return ((!value) ? hexFalse: hexTrue);\n        };\n        case \"bytes\": return function(value: BytesLike) {\n            return keccak256(value);\n        };\n        case \"string\": return function(value: string) {\n            return id(value);\n        };\n    }\n\n    return null;\n}\n\nfunction encodeType(name: string, fields: Array<TypedDataField>): string {\n    return `${ name }(${ fields.map(({ name, type }) => (type + \" \" + name)).join(\",\") })`;\n}\n\nexport class TypedDataEncoder {\n    readonly primaryType: string;\n    readonly types: Record<string, Array<TypedDataField>>;\n\n    readonly _encoderCache: Record<string, (value: any) => string>;\n    readonly _types: Record<string, string>;\n\n    constructor(types: Record<string, Array<TypedDataField>>) {\n        defineReadOnly(this, \"types\", Object.freeze(deepCopy(types)));\n\n        defineReadOnly(this, \"_encoderCache\", { });\n        defineReadOnly(this, \"_types\", { });\n\n        // Link struct types to their direct child structs\n        const links: Record<string, Record<string, boolean>> = { };\n\n        // Link structs to structs which contain them as a child\n        const parents: Record<string, Array<string>> = { };\n\n        // Link all subtypes within a given struct\n        const subtypes: Record<string, Record<string, boolean>> = { };\n\n        Object.keys(types).forEach((type) => {\n            links[type] = { };\n            parents[type] = [ ];\n            subtypes[type] = { }\n        });\n\n        for (const name in types) {\n\n            const uniqueNames: Record<string, boolean> = { };\n\n            types[name].forEach((field) => {\n\n                // Check each field has a unique name\n                if (uniqueNames[field.name]) {\n                    logger.throwArgumentError(`duplicate variable name ${ JSON.stringify(field.name) } in ${ JSON.stringify(name) }`, \"types\", types);\n                }\n                uniqueNames[field.name] = true;\n\n                // Get the base type (drop any array specifiers)\n                const baseType = field.type.match(/^([^\\x5b]*)(\\x5b|$)/)[1];\n                if (baseType === name) {\n                    logger.throwArgumentError(`circular type reference to ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Is this a base encoding type?\n                const encoder = getBaseEncoder(baseType);\n                if (encoder) { return ;}\n\n                if (!parents[baseType]) {\n                    logger.throwArgumentError(`unknown type ${ JSON.stringify(baseType) }`, \"types\", types);\n                }\n\n                // Add linkage\n                parents[baseType].push(name);\n                links[name][baseType] = true;\n            });\n        }\n\n        // Deduce the primary type\n        const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));\n\n        if (primaryTypes.length === 0) {\n            logger.throwArgumentError(\"missing primary type\", \"types\", types);\n        } else if (primaryTypes.length > 1) {\n            logger.throwArgumentError(`ambiguous primary types or unused types: ${ primaryTypes.map((t) => (JSON.stringify(t))).join(\", \") }`, \"types\", types);\n        }\n\n        defineReadOnly(this, \"primaryType\", primaryTypes[0]);\n\n        // Check for circular type references\n        function checkCircular(type: string, found: Record<string, boolean>) {\n            if (found[type]) {\n                logger.throwArgumentError(`circular type reference to ${ JSON.stringify(type) }`, \"types\", types);\n            }\n\n            found[type] = true;\n\n            Object.keys(links[type]).forEach((child) => {\n                if (!parents[child]) { return; }\n\n                // Recursively check children\n                checkCircular(child, found);\n\n                // Mark all ancestors as having this decendant\n                Object.keys(found).forEach((subtype) => {\n                    subtypes[subtype][child] = true;\n                });\n            });\n\n            delete found[type];\n        }\n        checkCircular(this.primaryType, { });\n\n        // Compute each fully describe type\n        for (const name in subtypes) {\n            const st = Object.keys(subtypes[name]);\n            st.sort();\n            this._types[name] = encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(\"\");\n        }\n    }\n\n    getEncoder(type: string): (value: any) => string {\n        let encoder = this._encoderCache[type];\n        if (!encoder) {\n            encoder = this._encoderCache[type] = this._getEncoder(type);\n        }\n        return encoder;\n    }\n\n    _getEncoder(type: string): (value: any) => string {\n\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return encoder; }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const subEncoder = this.getEncoder(subtype);\n            const length = parseInt(match[3]);\n            return (value: Array<any>) => {\n                if (length >= 0 && value.length !== length) {\n                    logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n                }\n\n                let result = value.map(subEncoder);\n                if (this._types[subtype]) {\n                    result = result.map(keccak256);\n                }\n\n                return keccak256(hexConcat(result));\n            };\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            const encodedType = id(this._types[type]);\n            return (value: Record<string, any>) => {\n                const values = fields.map(({ name, type }) => {\n                    const result = this.getEncoder(type)(value[name]);\n                    if (this._types[type]) { return keccak256(result); }\n                    return result;\n                });\n                values.unshift(encodedType);\n                return hexConcat(values);\n            }\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    encodeType(name: string): string {\n        const result = this._types[name];\n        if (!result) {\n            logger.throwArgumentError(`unknown type: ${ JSON.stringify(name) }`, \"name\", name);\n        }\n        return result;\n    }\n\n    encodeData(type: string, value: any): string {\n        return this.getEncoder(type)(value);\n    }\n\n    hashStruct(name: string, value: Record<string, any>): string {\n        return keccak256(this.encodeData(name, value));\n    }\n\n    encode(value: Record<string, any>): string {\n        return this.encodeData(this.primaryType, value);\n    }\n\n    hash(value: Record<string, any>): string {\n        return this.hashStruct(this.primaryType, value);\n    }\n\n    _visit(type: string, value: any, callback: (type: string, data: any) => any): any {\n        // Basic encoder type (address, bool, uint256, etc)\n        {\n            const encoder = getBaseEncoder(type);\n            if (encoder) { return callback(type, value); }\n        }\n\n        // Array\n        const match = type.match(/^(.*)(\\x5b(\\d*)\\x5d)$/);\n        if (match) {\n            const subtype = match[1];\n            const length = parseInt(match[3]);\n            if (length >= 0 && value.length !== length) {\n                logger.throwArgumentError(\"array length mismatch; expected length ${ arrayLength }\", \"value\", value);\n            }\n            return value.map((v: any) => this._visit(subtype, v, callback));\n        }\n\n        // Struct\n        const fields = this.types[type];\n        if (fields) {\n            return fields.reduce((accum, { name, type }) => {\n                accum[name] = this._visit(type, value[name], callback);\n                return accum;\n            }, <Record<string, any>>{});\n        }\n\n        return logger.throwArgumentError(`unknown type: ${ type }`, \"type\", type);\n    }\n\n    visit(value: Record<string, any>, callback: (type: string, data: any) => any): any {\n        return this._visit(this.primaryType, value, callback);\n    }\n\n    static from(types: Record<string, Array<TypedDataField>>): TypedDataEncoder {\n        return new TypedDataEncoder(types);\n    }\n\n    static getPrimaryType(types: Record<string, Array<TypedDataField>>): string {\n        return TypedDataEncoder.from(types).primaryType;\n    }\n\n    static hashStruct(name: string, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return TypedDataEncoder.from(types).hashStruct(name, value);\n    }\n\n    static hashDomain(domain: TypedDataDomain): string {\n        const domainFields: Array<TypedDataField> = [ ];\n        for (const name in domain) {\n            const type = domainFieldTypes[name];\n            if (!type) {\n                logger.throwArgumentError(`invalid typed-data domain key: ${ JSON.stringify(name) }`, \"domain\", domain);\n            }\n            domainFields.push({ name, type });\n        }\n\n        domainFields.sort((a, b) => {\n            return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);\n        });\n\n        return TypedDataEncoder.hashStruct(\"EIP712Domain\", { EIP712Domain: domainFields }, domain);\n    }\n\n    static encode(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return hexConcat([\n            \"0x1901\",\n            TypedDataEncoder.hashDomain(domain),\n            TypedDataEncoder.from(types).hash(value)\n        ]);\n    }\n\n    static hash(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): string {\n        return keccak256(TypedDataEncoder.encode(domain, types, value));\n    }\n\n    // Replaces all address types with ENS names with their looked up address\n    static async resolveNames(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, resolveName: (name: string) => Promise<string>): Promise<{ domain: TypedDataDomain, value: any }> {\n        // Make a copy to isolate it from the object passed in\n        domain = shallowCopy(domain);\n\n        // Look up all ENS names\n        const ensCache: Record<string, string> = { };\n\n        // Do we need to look up the domain's verifyingContract?\n        if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {\n            ensCache[domain.verifyingContract] = \"0x\";\n        }\n\n        // We are going to use the encoder to visit all the base values\n        const encoder = TypedDataEncoder.from(types);\n\n        // Get a list of all the addresses\n        encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && !isHexString(value, 20)) {\n                ensCache[value] = \"0x\";\n            }\n            return value;\n        });\n\n        // Lookup each name\n        for (const name in ensCache) {\n            ensCache[name] = await resolveName(name);\n        }\n\n        // Replace the domain verifyingContract if needed\n        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {\n            domain.verifyingContract = ensCache[domain.verifyingContract];\n        }\n\n        // Replace all ENS names with their address\n        value = encoder.visit(value, (type: string, value: any) => {\n            if (type === \"address\" && ensCache[value]) { return ensCache[value]; }\n            return value;\n        });\n\n        return { domain, value };\n    }\n\n    static getPayload(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): any {\n        // Validate the domain fields\n        TypedDataEncoder.hashDomain(domain);\n\n        // Derive the EIP712Domain Struct reference type\n        const domainValues: Record<string, any> = { };\n        const domainTypes: Array<{ name: string, type:string }> = [ ];\n\n        domainFieldNames.forEach((name) => {\n            const value = (<any>domain)[name];\n            if (value == null) { return; }\n            domainValues[name] = domainChecks[name](value);\n            domainTypes.push({ name, type: domainFieldTypes[name] });\n        });\n\n        const encoder = TypedDataEncoder.from(types);\n\n        const typesWithDomain = shallowCopy(types);\n        if (typesWithDomain.EIP712Domain) {\n            logger.throwArgumentError(\"types must not contain EIP712Domain type\", \"types.EIP712Domain\", types);\n        } else {\n            typesWithDomain.EIP712Domain = domainTypes;\n        }\n\n        // Validate the data structures and types\n        encoder.encode(value);\n\n        return {\n            types: typesWithDomain,\n            domain: domainValues,\n            primaryType: encoder.primaryType,\n            message: encoder.visit(value, (type: string, value: any) => {\n\n                // bytes\n                if (type.match(/^bytes(\\d*)/)) {\n                    return hexlify(arrayify(value));\n                }\n\n                // uint or int\n                if (type.match(/^u?int/)) {\n                    return BigNumber.from(value).toString();\n                }\n\n                switch (type) {\n                    case \"address\":\n                        return value.toLowerCase();\n                    case \"bool\":\n                        return !!value;\n                    case \"string\":\n                        if (typeof(value) !== \"string\") {\n                            logger.throwArgumentError(`invalid string`, \"value\", value);\n                        }\n                        return value;\n                }\n\n                return logger.throwArgumentError(\"unsupported type\", \"type\", type);\n            })\n        };\n    }\n}\n\n","/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nexport class BaseX {\n    readonly alphabet: string;\n    readonly base: number;\n\n    _alphabetMap: { [ character: string ]: number };\n    _leader: string;\n\n    constructor(alphabet: string) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n\n        defineReadOnly(this, \"_alphabetMap\", { });\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n\n    encode(value: BytesLike): string {\n        let source = arrayify(value);\n\n        if (source.length === 0) { return \"\"; }\n\n        let digits = [ 0 ]\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n\n        let string = \"\"\n\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n\n        return string;\n    }\n\n    decode(value: string): Uint8Array {\n        if (typeof(value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n\n        let bytes: Array<number> = [];\n        if (value.length === 0) { return new Uint8Array(bytes); }\n\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0)\n        }\n\n        return arrayify(new Uint8Array(bytes.reverse()))\n    }\n}\n\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\nexport { Base32, Base58 };\n\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n","\"use strict\";\n\nimport { arrayify, BytesLike, hexlify } from \"@ethersproject/bytes\";\nimport { computeHmac, SupportedAlgorithm } from \"@ethersproject/sha2\";\n\nexport function pbkdf2(password: BytesLike, salt: BytesLike, iterations: number, keylen: number, hashAlgorithm: string): string {\n    password = arrayify(password);\n    salt = arrayify(salt);\n    let hLen;\n    let l = 1;\n    const DK = new Uint8Array(keylen)\n    const block1 = new Uint8Array(salt.length + 4)\n    block1.set(salt);\n    //salt.copy(block1, 0, 0, salt.length)\n\n    let r: number;\n    let T: Uint8Array;\n\n    for (let i = 1; i <= l; i++) {\n        //block1.writeUInt32BE(i, salt.length)\n        block1[salt.length] = (i >> 24) & 0xff;\n        block1[salt.length + 1] = (i >> 16) & 0xff;\n        block1[salt.length + 2] = (i >> 8) & 0xff;\n        block1[salt.length + 3] = i & 0xff;\n\n        //let U = createHmac(password).update(block1).digest();\n        let U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, block1));\n\n        if (!hLen) {\n            hLen = U.length\n            T = new Uint8Array(hLen)\n            l = Math.ceil(keylen / hLen)\n            r = keylen - (l - 1) * hLen\n        }\n\n        //U.copy(T, 0, 0, hLen)\n        T.set(U);\n\n\n        for (let j = 1; j < iterations; j++) {\n            //U = createHmac(password).update(U).digest();\n            U = arrayify(computeHmac(<SupportedAlgorithm>hashAlgorithm, password, U));\n            for (let k = 0; k < hLen; k++) T[k] ^= U[k]\n        }\n\n\n        const destPos = (i - 1) * hLen\n        const len = (i === l ? r : hLen)\n        //T.copy(DK, destPos, 0, len)\n        DK.set(arrayify(T).slice(0, len), destPos);\n    }\n\n    return hexlify(DK)\n}\n\n","\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\n\nexport abstract class Wordlist {\n    readonly locale: string;\n\n    constructor(locale: string) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n\n    abstract getWord(index: number): string;\n    abstract getWordIndex(word: string): number;\n\n    // Subclasses may override this\n    split(mnemonic: string): Array<string> {\n        return mnemonic.toLowerCase().split(/ +/g)\n    }\n\n    // Subclasses may override this\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    static check(wordlist: Wordlist): string {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n\n    static register(lang: Wordlist, name?: string): void {\n        if (!name) { name = lang.locale; }\n\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = (window as any)\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) { }\n        }\n    }\n\n}\n\n","export const version = \"wordlists/5.5.0\";\n","\"use strict\";\n\nimport { Wordlist } from \"./wordlist\";\n\n\nconst words = \"AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo\";\n\nlet wordlist: Array<string> = null;\n\n\nfunction loadWords(lang: Wordlist): void {\n    if (wordlist != null) { return; }\n    wordlist = words.replace(/([A-Z])/g, \" $1\").toLowerCase().substring(1).split(\" \");\n\n    // Verify the computed list matches the official list\n    /* istanbul ignore if */\n    if (Wordlist.check(lang) !== \"0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60\") {\n        wordlist = null;\n        throw new Error(\"BIP39 Wordlist for en (English) FAILED\");\n    }\n}\n\nclass LangEn extends Wordlist {\n    constructor() {\n        super(\"en\");\n    }\n\n    getWord(index: number): string {\n        loadWords(this);\n        return wordlist[index];\n    }\n\n    getWordIndex(word: string): number {\n        loadWords(this);\n        return wordlist.indexOf(word);\n    }\n}\n\nconst langEn = new LangEn();\nWordlist.register(langEn);\n\nexport { langEn };\n","\"use strict\";\n\n// Wordlists\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039/bip-0039-wordlists.md\n\n// Browser; only include English by default\n\nimport { Wordlist } from \"./wordlist\";\n\nimport { langEn as en } from \"./lang-en\";\n\nexport const wordlists: { [ locale: string ]: Wordlist } = {\n  en: en\n}\n","\"use strict\";\n\n// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\n\nconst HardenedBit = 0x80000000;\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits);\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return (1 << bits) - 1;\n}\n\nfunction bytes32(value: BigNumber | Uint8Array): string {\n    return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nfunction getWordlist(wordlist: string | Wordlist): Wordlist {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n\n    if (typeof(wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n\n    return wordlist;\n}\n\nconst _constructorGuard: any = {};\n\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n\nexport interface Mnemonic {\n    readonly phrase: string;\n    readonly path: string;\n    readonly locale: string;\n};\n\nexport class HDNode implements ExternallyOwnedAccount {\n    readonly privateKey: string;\n    readonly publicKey: string;\n\n    readonly fingerprint: string;\n    readonly parentFingerprint: string;\n\n    readonly address: string;\n\n    readonly mnemonic?: Mnemonic;\n    readonly path: string;\n\n    readonly chainCode: string;\n\n    readonly index: number;\n    readonly depth: number;\n\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard: any, privateKey: string, publicKey: string, parentFingerprint: string, chainCode: string, index: number, depth: number, mnemonicOrPath: Mnemonic | string) {\n        logger.checkNew(new.target, HDNode);\n\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n        defineReadOnly(this, \"chainCode\", chainCode);\n\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n\n        } else if (typeof(mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n\n        } else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        if (this.depth >= 256) { throw new Error(\"Depth too large!\"); }\n\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\": \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([ \"0x00\", this.privateKey ]): this.publicKey),\n        ]));\n    }\n\n    neuter(): HDNode {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n\n    private _derive(index: number): HDNode {\n        if (index > 0xffffffff) { throw new Error(\"invalid index - \" + String(index)); }\n\n        // Base path\n        let path = this.path;\n        if (path) { path += \"/\" + (index & ~HardenedBit); }\n\n        const data = new Uint8Array(37);\n\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n\n            // Hardened path\n            if (path) { path += \"'\"; }\n\n        } else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n\n        // The private key\n        let ki: string = null\n\n        // The public key\n        let Ki: string = null;\n\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n\n        let mnemonicOrPath: Mnemonic | string = path;\n\n        const srcMnemonic =  this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n\n    derivePath(path: string): HDNode {\n        const components = path.split(\"/\");\n\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n\n        if (components[0] === \"m\") { components.shift(); }\n\n        let result: HDNode = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(index);\n            } else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n\n        return result;\n    }\n\n\n    static _fromSeed(seed: BytesLike, mnemonic: Mnemonic): HDNode {\n        const seedArray: Uint8Array = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) { throw new Error(\"invalid seed\"); }\n\n        const I: Uint8Array = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n\n    static fromMnemonic(mnemonic: string, password?: string, wordlist?: string | Wordlist): HDNode {\n\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n\n    static fromSeed(seed: BytesLike): HDNode {\n        return HDNode._fromSeed(seed, null);\n    }\n\n    static fromExtendedKey(extendedKey: string): HDNode {\n        const bytes = Base58.decode(extendedKey);\n\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\n\nexport function mnemonicToSeed(mnemonic: string, password?: string): string {\n    if (!password) { password = \"\"; }\n\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\n\nexport function mnemonicToEntropy(mnemonic: string, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    logger.checkNormalize();\n\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) { throw new Error(\"invalid mnemonic\"); }\n\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) { throw new Error(\"invalid mnemonic\"); }\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nexport function entropyToMnemonic(entropy: BytesLike, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    entropy = arrayify(entropy);\n\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nexport function isValidMnemonic(mnemonic: string, wordlist?: Wordlist): boolean {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getAccountPath(index: number): string {\n    if (typeof(index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${ index }'/0/0`;\n}\n","export const version = \"hdnode/5.5.0\";\n","export const version = \"random/5.5.0\";\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Debugging line for testing browser lib in node\n//const window = { crypto: { getRandomValues: () => { } } };\n\nlet anyGlobal: any = null;\ntry {\n    anyGlobal = (window as any);\n    if (anyGlobal == null) { throw new Error(\"try next\"); }\n} catch (error) {\n    try {\n        anyGlobal = (global as any);\n        if (anyGlobal == null) { throw new Error(\"try next\"); }\n    } catch (error) {\n        anyGlobal = { };\n    }\n}\n\nlet crypto: any = anyGlobal.crypto || anyGlobal.msCrypto;\nif (!crypto || !crypto.getRandomValues) {\n\n    logger.warn(\"WARNING: Missing strong random number source\");\n\n    crypto = {\n        getRandomValues: function(buffer: Uint8Array): Uint8Array {\n            return logger.throwError(\"no secure random source avaialble\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"crypto.getRandomValues\"\n            });\n        }\n    };\n}\n\nexport function randomBytes(length: number): Uint8Array {\n    if (length <= 0 || length > 1024 || (length % 1) || length != length) {\n        logger.throwArgumentError(\"invalid length\", \"length\", length);\n    }\n\n    const result = new Uint8Array(length);\n    crypto.getRandomValues(result);\n    return arrayify(result);\n};\n","export const version = \"json-wallets/5.5.0\";\n","\"use strict\";\n\nimport { arrayify, Bytes, BytesLike, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from '@ethersproject/strings';\n\nexport function looseArrayify(hexString: string): Uint8Array {\n    if (typeof(hexString) === 'string' && hexString.substring(0, 2) !== '0x') {\n        hexString = '0x' + hexString;\n    }\n    return arrayify(hexString);\n}\n\nexport function zpad(value: String | number, length: number): String {\n    value = String(value);\n    while (value.length < length) { value = '0' + value; }\n    return value;\n}\n\nexport function getPassword(password: Bytes | string): Uint8Array {\n    if (typeof(password) === 'string') {\n        return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);\n    }\n    return arrayify(password);\n}\n\nexport function searchPath(object: any, path: string): string {\n    let currentChild = object;\n\n    const comps = path.toLowerCase().split('/');\n    for (let i = 0; i < comps.length; i++) {\n\n        // Search for a child object with a case-insensitive matching key\n        let matchingChild = null;\n        for (const key in currentChild) {\n             if (key.toLowerCase() === comps[i]) {\n                 matchingChild = currentChild[key];\n                 break;\n             }\n        }\n\n        // Didn't find one. :'(\n        if (matchingChild === null) {\n            return null;\n        }\n\n        // Now check this child...\n        currentChild = matchingChild;\n    }\n\n    return currentChild;\n}\n\n// See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)\nexport function uuidV4(randomBytes: BytesLike): string {\n    const bytes = arrayify(randomBytes);\n\n    // Section: 4.1.3:\n    // - time_hi_and_version[12:16] = 0b0100\n    bytes[6] = (bytes[6] & 0x0f) | 0x40;\n\n    // Section 4.4\n    // - clock_seq_hi_and_reserved[6] = 0b0\n    // - clock_seq_hi_and_reserved[7] = 0b1\n    bytes[8] = (bytes[8] & 0x3f) | 0x80;\n\n    const value = hexlify(bytes);\n\n    return [\n       value.substring(2, 10),\n       value.substring(10, 14),\n       value.substring(14, 18),\n       value.substring(18, 22),\n       value.substring(22, 34),\n    ].join(\"-\");\n}\n\n","\"use strict\";\n\nimport aes from \"aes-js\";\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, Bytes } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\n\nexport interface _CrowdsaleAccount {\n    address: string;\n    privateKey: string;\n\n    _isCrowdsaleAccount: boolean;\n}\n\nexport class CrowdsaleAccount extends Description<_CrowdsaleAccount> implements ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n    readonly mnemonic?: string;\n    readonly path?: string;\n\n    readonly _isCrowdsaleAccount: boolean;\n\n    isCrowdsaleAccount(value: any): value is CrowdsaleAccount {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json: string, password: Bytes | string): ExternallyOwnedAccount {\n    const data = JSON.parse(json);\n\n    password = getPassword(password);\n\n    // Ethereum Address\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n\n    // Decrypt the seed\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n\n    const seedHexBytes = toUtf8Bytes(seedHex);\n\n    const privateKey = keccak256(seedHexBytes);\n\n    return new CrowdsaleAccount ({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\n\n\nexport function isCrowdsaleWallet(json: string): boolean {\n    let data: any = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) { return false; }\n\n    return (data.encseed && data.ethaddr);\n}\n\nexport function isKeystoreWallet(json: string): boolean {\n    let data: any = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) { return false; }\n\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\n\nexport function getJsonWalletAddress(json: string): string {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        } catch (error) { return null; }\n    }\n\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        } catch (error) { return null; }\n    }\n\n    return null;\n}\n\n","\"use strict\";\n\nimport aes from \"aes-js\";\nimport scrypt from \"scrypt-js\";\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, Bytes, BytesLike, concat, hexlify } from \"@ethersproject/bytes\";\nimport { defaultPath, entropyToMnemonic, HDNode, Mnemonic, mnemonicToEntropy } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 as _pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { Description } from \"@ethersproject/properties\";\nimport { computeAddress } from \"@ethersproject/transactions\";\n\nimport { getPassword, looseArrayify, searchPath, uuidV4, zpad } from \"./utils\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Exported Types\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    return (value != null && value.mnemonic && value.mnemonic.phrase);\n}\n\nexport interface _KeystoreAccount {\n    address: string;\n    privateKey: string;\n    mnemonic?: Mnemonic;\n\n    _isKeystoreAccount: boolean;\n}\n\nexport class KeystoreAccount extends Description<_KeystoreAccount> implements ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n    readonly mnemonic?: Mnemonic;\n\n    readonly _isKeystoreAccount: boolean;\n\n    isKeystoreAccount(value: any): value is KeystoreAccount {\n        return !!(value && value._isKeystoreAccount);\n    }\n}\n\nexport type ProgressCallback = (percent: number) => void;\n\nexport type EncryptOptions = {\n   iv?: BytesLike;\n   entropy?: BytesLike;\n   client?: string;\n   salt?: BytesLike;\n   uuid?: string;\n   scrypt?: {\n       N?: number;\n       r?: number;\n       p?: number;\n   }\n}\n\nfunction _decrypt(data: any, key: Uint8Array, ciphertext: Uint8Array): Uint8Array {\n    const cipher = searchPath(data, \"crypto/cipher\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = looseArrayify(searchPath(data, \"crypto/cipherparams/iv\"))\n        const counter = new aes.Counter(iv);\n\n        const aesCtr = new aes.ModeOfOperation.ctr(key, counter);\n\n        return arrayify(aesCtr.decrypt(ciphertext));\n    }\n\n    return null;\n}\n\nfunction _getAccount(data: any, key: Uint8Array): KeystoreAccount {\n    const ciphertext = looseArrayify(searchPath(data, \"crypto/ciphertext\"));\n\n    const computedMAC = hexlify(keccak256(concat([ key.slice(16, 32), ciphertext ]))).substring(2);\n    if (computedMAC !== searchPath(data, \"crypto/mac\").toLowerCase()) {\n        throw new Error(\"invalid password\");\n    }\n\n    const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);\n\n    if (!privateKey) {\n        logger.throwError(\"unsupported cipher\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"decrypt\"\n        });\n    }\n\n    const mnemonicKey = key.slice(32, 64);\n\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (check.substring(0, 2) !== \"0x\") { check = \"0x\" + check; }\n\n        if (getAddress(check) !== address) {\n            throw new Error(\"address mismatch\");\n        }\n    }\n\n    const account: _KeystoreAccount = {\n        _isKeystoreAccount: true,\n        address: address,\n        privateKey: hexlify(privateKey)\n    };\n\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    if (searchPath(data, \"x-ethers/version\") === \"0.1\") {\n        const mnemonicCiphertext = looseArrayify(searchPath(data, \"x-ethers/mnemonicCiphertext\"));\n        const mnemonicIv = looseArrayify(searchPath(data, \"x-ethers/mnemonicCounter\"));\n\n        const mnemonicCounter = new aes.Counter(mnemonicIv);\n        const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n\n        const path = searchPath(data, \"x-ethers/path\") || defaultPath;\n        const locale = searchPath(data, \"x-ethers/locale\") || \"en\";\n\n        const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));\n\n        try {\n            const mnemonic = entropyToMnemonic(entropy, locale);\n            const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);\n\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n\n            account.mnemonic = node.mnemonic;\n\n        } catch (error) {\n            // If we don't have the locale wordlist installed to\n            // read this mnemonic, just bail and don't set the\n            // mnemonic\n            if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== \"wordlist\") {\n                throw error;\n            }\n        }\n    }\n\n    return new KeystoreAccount(account);\n}\n\ntype ScryptFunc<T> = (pw: Uint8Array, salt: Uint8Array, n: number, r: number, p: number, dkLen: number, callback?: ProgressCallback) => T;\ntype Pbkdf2Func<T> = (pw: Uint8Array, salt: Uint8Array, c: number, dkLen: number, prfFunc: string) => T;\n\nfunction pbkdf2Sync(passwordBytes: Uint8Array, salt: Uint8Array, count: number, dkLen: number, prfFunc: string): Uint8Array {\n    return arrayify(_pbkdf2(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction pbkdf2(passwordBytes: Uint8Array, salt: Uint8Array, count: number, dkLen: number, prfFunc: string): Promise<Uint8Array> {\n    return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));\n}\n\nfunction _computeKdfKey<T>(data: any, password: Bytes | string, pbkdf2Func: Pbkdf2Func<T>, scryptFunc: ScryptFunc<T>, progressCallback?: ProgressCallback): T {\n    const passwordBytes = getPassword(password);\n\n    const kdf = searchPath(data, \"crypto/kdf\");\n\n    if (kdf && typeof(kdf) === \"string\") {\n        const throwError = function(name: string, value: any): never {\n            return logger.throwArgumentError(\"invalid key-derivation function parameters\", name, value);\n        }\n\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n            const N = parseInt(searchPath(data, \"crypto/kdfparams/n\"));\n            const r = parseInt(searchPath(data, \"crypto/kdfparams/r\"));\n            const p = parseInt(searchPath(data, \"crypto/kdfparams/p\"));\n\n            // Check for all required parameters\n            if (!N || !r || !p) { throwError(\"kdf\", kdf); }\n\n            // Make sure N is a power of 2\n            if ((N & (N - 1)) !== 0) { throwError(\"N\", N); }\n\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) { throwError(\"dklen\", dkLen); }\n\n            return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);\n\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n\n            const salt = looseArrayify(searchPath(data, \"crypto/kdfparams/salt\"));\n\n            let prfFunc: string = null;\n            const prf = searchPath(data, \"crypto/kdfparams/prf\");\n            if (prf === \"hmac-sha256\") {\n                prfFunc = \"sha256\";\n            } else if (prf === \"hmac-sha512\") {\n                prfFunc = \"sha512\";\n            } else {\n                throwError(\"prf\", prf);\n            }\n\n            const count = parseInt(searchPath(data, \"crypto/kdfparams/c\"));\n\n            const dkLen = parseInt(searchPath(data, \"crypto/kdfparams/dklen\"));\n            if (dkLen !== 32) { throwError(\"dklen\", dkLen); }\n\n            return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);\n        }\n    }\n\n    return logger.throwArgumentError(\"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\n\nexport function decryptSync(json: string, password: Bytes | string): KeystoreAccount {\n    const data = JSON.parse(json);\n\n    const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt.syncScrypt);\n    return _getAccount(data, key);\n}\n\nexport async function decrypt(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<KeystoreAccount> {\n    const data = JSON.parse(json);\n\n    const key = await _computeKdfKey(data, password, pbkdf2, scrypt.scrypt, progressCallback);\n    return _getAccount(data, key);\n}\n\n\nexport function encrypt(account: ExternallyOwnedAccount, password: Bytes | string, options?: EncryptOptions, progressCallback?: ProgressCallback): Promise<string> {\n\n    try {\n        // Check the address matches the private key\n        if (getAddress(account.address) !== computeAddress(account.privateKey)) {\n            throw new Error(\"address/privateKey mismatch\");\n        }\n\n        // Check the mnemonic (if any) matches the private key\n        if (hasMnemonic(account)) {\n            const mnemonic = account.mnemonic;\n            const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);\n\n            if (node.privateKey != account.privateKey) {\n                throw new Error(\"mnemonic mismatch\");\n            }\n        }\n\n    } catch (e) {\n        return Promise.reject(e);\n    }\n\n    // The options are optional, so adjust the call as needed\n    if (typeof(options) === \"function\" && !progressCallback) {\n        progressCallback = options;\n        options = {};\n    }\n    if (!options) { options = {}; }\n\n    const privateKey: Uint8Array = arrayify(account.privateKey);\n    const passwordBytes = getPassword(password);\n\n    let entropy: Uint8Array = null\n    let path: string = null;\n    let locale: string = null;\n    if (hasMnemonic(account)) {\n        const srcMnemonic = account.mnemonic;\n        entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || \"en\"));\n        path = srcMnemonic.path || defaultPath;\n        locale = srcMnemonic.locale || \"en\";\n    }\n\n    let client = options.client;\n    if (!client) { client = \"ethers.js\"; }\n\n    // Check/generate the salt\n    let salt: Uint8Array = null;\n    if (options.salt) {\n        salt = arrayify(options.salt);\n    } else {\n        salt = randomBytes(32);;\n    }\n\n    // Override initialization vector\n    let iv: Uint8Array = null;\n    if (options.iv) {\n        iv = arrayify(options.iv);\n        if (iv.length !== 16) { throw new Error(\"invalid iv\"); }\n    } else {\n       iv = randomBytes(16);\n    }\n\n    // Override the uuid\n    let uuidRandom: Uint8Array = null;\n    if (options.uuid) {\n        uuidRandom = arrayify(options.uuid);\n        if (uuidRandom.length !== 16) { throw new Error(\"invalid uuid\"); }\n    } else {\n        uuidRandom = randomBytes(16);\n    }\n\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) { N = options.scrypt.N; }\n        if (options.scrypt.r) { r = options.scrypt.r; }\n        if (options.scrypt.p) { p = options.scrypt.p; }\n    }\n\n    // We take 64 bytes:\n    //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    return scrypt.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {\n        key = arrayify(key);\n\n        // This will be used to encrypt the wallet (as per Web3 secret storage)\n        const derivedKey = key.slice(0, 16);\n        const macPrefix = key.slice(16, 32);\n\n        // This will be used to encrypt the mnemonic phrase (if any)\n        const mnemonicKey = key.slice(32, 64);\n\n        // Encrypt the private key\n        const counter = new aes.Counter(iv);\n        const aesCtr = new aes.ModeOfOperation.ctr(derivedKey, counter);\n        const ciphertext = arrayify(aesCtr.encrypt(privateKey));\n\n        // Compute the message authentication code, used to check the password\n        const mac = keccak256(concat([macPrefix, ciphertext]))\n\n        // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n        const data: { [key: string]: any } = {\n            address: account.address.substring(2).toLowerCase(),\n            id: uuidV4(uuidRandom),\n            version: 3,\n            Crypto: {\n                cipher: \"aes-128-ctr\",\n                cipherparams: {\n                    iv: hexlify(iv).substring(2),\n                },\n                ciphertext: hexlify(ciphertext).substring(2),\n                kdf: \"scrypt\",\n                kdfparams: {\n                    salt: hexlify(salt).substring(2),\n                    n: N,\n                    dklen: 32,\n                    p: p,\n                    r: r\n                },\n                mac: mac.substring(2)\n            }\n        };\n\n        // If we have a mnemonic, encrypt it into the JSON wallet\n        if (entropy) {\n            const mnemonicIv = randomBytes(16);\n            const mnemonicCounter = new aes.Counter(mnemonicIv);\n            const mnemonicAesCtr = new aes.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);\n            const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));\n            const now = new Date();\n            const timestamp = (now.getUTCFullYear() + \"-\" +\n                               zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                               zpad(now.getUTCDate(), 2) + \"T\" +\n                               zpad(now.getUTCHours(), 2) + \"-\" +\n                               zpad(now.getUTCMinutes(), 2) + \"-\" +\n                               zpad(now.getUTCSeconds(), 2) + \".0Z\"\n                              );\n            data[\"x-ethers\"] = {\n                client: client,\n                gethFilename: (\"UTC--\" + timestamp + \"--\" + data.address),\n                mnemonicCounter: hexlify(mnemonicIv).substring(2),\n                mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n                path: path,\n                locale: locale,\n                version: \"0.1\"\n            };\n        }\n\n        return JSON.stringify(data);\n    });\n}\n","\"use strict\";\n\nimport { Bytes } from \"@ethersproject/bytes\";\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\n\nimport { decrypt as decryptCrowdsale } from \"./crowdsale\";\nimport { getJsonWalletAddress, isCrowdsaleWallet, isKeystoreWallet } from \"./inspect\";\nimport { decrypt as decryptKeystore, decryptSync as decryptKeystoreSync, encrypt as encryptKeystore, EncryptOptions, ProgressCallback } from \"./keystore\";\n\nfunction decryptJsonWallet(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<ExternallyOwnedAccount> {\n    if (isCrowdsaleWallet(json)) {\n        if (progressCallback) { progressCallback(0); }\n        const account = decryptCrowdsale(json, password)\n        if (progressCallback) { progressCallback(1); }\n        return Promise.resolve(account);\n    }\n\n    if (isKeystoreWallet(json)) {\n        return decryptKeystore(json, password, progressCallback);\n    }\n\n    return Promise.reject(new Error(\"invalid JSON wallet\"));\n}\n\nfunction decryptJsonWalletSync(json: string, password: Bytes | string): ExternallyOwnedAccount {\n    if (isCrowdsaleWallet(json)) {\n        return decryptCrowdsale(json, password)\n    }\n\n    if (isKeystoreWallet(json)) {\n        return decryptKeystoreSync(json, password);\n    }\n\n    throw new Error(\"invalid JSON wallet\");\n}\n\nexport {\n    decryptCrowdsale,\n\n    decryptKeystore,\n    decryptKeystoreSync,\n    encryptKeystore,\n\n    isCrowdsaleWallet,\n    isKeystoreWallet,\n    getJsonWalletAddress,\n\n    decryptJsonWallet,\n    decryptJsonWalletSync,\n\n    ProgressCallback,\n    EncryptOptions,\n};\n","export const version = \"wallet/5.5.0\";\n","\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider, TransactionRequest } from \"@ethersproject/abstract-provider\";\nimport { ExternallyOwnedAccount, Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { arrayify, Bytes, BytesLike, concat, hexDataSlice, isHexString, joinSignature, SignatureLike } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic, Mnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize, UnsignedTransaction } from \"@ethersproject/transactions\";\nimport { Wordlist } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value: any): value is ExternallyOwnedAccount {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\n\nexport class Wallet extends Signer implements ExternallyOwnedAccount, TypedDataSigner {\n\n    readonly address: string;\n    readonly provider: Provider;\n\n    // Wrapping the _signingKey and _mnemonic in a getter function prevents\n    // leaking the private key in console.log; still, be careful! :)\n    readonly _signingKey: () => SigningKey;\n    readonly _mnemonic: () => Mnemonic;\n\n    constructor(privateKey: BytesLike | ExternallyOwnedAccount | SigningKey, provider?: Provider) {\n        logger.checkNew(new.target, Wallet);\n\n        super();\n\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => (\n                    {\n                        phrase: srcMnemonic.phrase,\n                        path: srcMnemonic.path || defaultPath,\n                        locale: srcMnemonic.locale || \"en\"\n                    }\n                ));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            } else {\n                defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            }\n\n\n        } else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => (<SigningKey>privateKey));\n\n            } else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof(privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n\n            defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    get mnemonic(): Mnemonic { return this._mnemonic(); }\n    get privateKey(): string { return this._signingKey().privateKey; }\n    get publicKey(): string { return this._signingKey().publicKey; }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    connect(provider: Provider): Wallet {\n        return new Wallet(this, provider);\n    }\n\n    signTransaction(transaction: TransactionRequest): Promise<string> {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n\n            const signature = this._signingKey().signDigest(keccak256(serialize(<UnsignedTransaction>tx)));\n            return serialize(<UnsignedTransaction>tx, signature);\n        });\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            if (this.provider == null) {\n                logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName\",\n                    value: name\n                });\n            }\n            return this.provider.resolveName(name);\n        });\n\n        return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    }\n\n    encrypt(password: Bytes | string, options?: any, progressCallback?: ProgressCallback): Promise<string> {\n        if (typeof(options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n\n        if (progressCallback && typeof(progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n\n        if (!options) { options = {}; }\n\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n\n\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options?: any): Wallet {\n        let entropy: Uint8Array = randomBytes(16);\n\n        if (!options) { options = { }; }\n\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([ entropy, options.extraEntropy ])), 0, 16));\n        }\n\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n\n    static fromEncryptedJson(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<Wallet> {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n\n    static fromEncryptedJsonSync(json: string, password: Bytes | string): Wallet {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n\n    static fromMnemonic(mnemonic: string, path?: string, wordlist?: Wordlist): Wallet {\n        if (!path) { path = defaultPath; }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\n\nexport function verifyMessage(message: Bytes | string, signature: SignatureLike): string {\n    return recoverAddress(hashMessage(message), signature);\n}\n\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n","export const AddressZero = \"0x0000000000000000000000000000000000000000\";\n\n","export const HashZero = \"0x0000000000000000000000000000000000000000000000000000000000000000\";\n\n","// NFKC (composed)             // (decomposed)\nexport const EtherSymbol = \"\\u039e\";  // \"\\uD835\\uDF63\";\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Network, Networkish } from \"./types\";\n\nexport {\n    Network,\n    Networkish\n};\n\ntype DefaultProviderFunc = (providers: any, options?: any) => any;\n\ninterface Renetworkable extends DefaultProviderFunc {\n    renetwork: (network: Network) => DefaultProviderFunc;\n};\n\nfunction isRenetworkable(value: any): value is Renetworkable {\n    return (value && typeof(value.renetwork) === \"function\");\n}\n\nfunction ethDefaultProvider(network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (options == null) { options = { }; }\n        const providerList: Array<any> = [];\n\n        if (providers.InfuraProvider) {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            } catch(error) { }\n        }\n\n        if (providers.EtherscanProvider) {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            } catch(error) { }\n        }\n\n        if (providers.AlchemyProvider) {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            } catch(error) { }\n        }\n\n        if (providers.PocketProvider) {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [ \"goerli\", \"ropsten\", \"rinkeby\" ];\n            try {\n                const provider = new providers.PocketProvider(network);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            } catch(error) { }\n        }\n\n        if (providers.CloudflareProvider) {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            } catch(error) { }\n        }\n\n        if (providerList.length === 0) { return null; }\n\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            } else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n\n        return providerList[0];\n    };\n\n    func.renetwork = function(network: Network) {\n        return ethDefaultProvider(network);\n    };\n\n    return func;\n}\n\nfunction etcDefaultProvider(url: string, network: string | Network): Renetworkable {\n    const func = function(providers: any, options?: any): any {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n\n        return null;\n    };\n\n    func.renetwork = function(network: Network) {\n        return etcDefaultProvider(url, network);\n    };\n\n    return func;\n}\n\nconst homestead: Network = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\n\nconst ropsten: Network = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\n\nconst classicMordor: Network = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n\n// See: https://chainlist.org\nconst networks: { [name: string]: Network } = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n\n    homestead: homestead,\n    mainnet: homestead,\n\n    morden: { chainId: 2, name: \"morden\" },\n\n    ropsten: ropsten,\n    testnet: ropsten,\n\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n     },\n\n\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n\n    xdai: { chainId: 100, name: \"xdai\" },\n\n    matic: { chainId: 137, name: \"matic\" },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n\n    optimism: { chainId: 10, name: \"optimism\" },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n}\n\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network: Networkish): Network {\n    // No network (null)\n    if (network == null) { return null; }\n\n    if (typeof(network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n\n    if (typeof(network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) { return null; }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n\n    const standard  = networks[network.name];\n\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof(network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider: DefaultProviderFunc = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        } else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n","export const version = \"networks/5.5.1\";\n","\"use strict\";\n\nimport { toUtf8CodePoints, _toUtf8String, UnicodeNormalizationForm } from \"./utf8\";\n\ntype Ranged = {\n    l: number,          // Lo value\n    h: number,          // High value (less the lo)\n    d?: number,         // Delta/stride (default: 1)\n    s?: number,         // Shift (default: 1)\n    e?: Array<number>   // Exceptions to skip\n};\n\ntype Table = { [ src: number ]: Array<number> };\n\nfunction bytes2(data: string): Array<number> {\n    if ((data.length % 4) !== 0) { throw new Error(\"bad data\"); }\n    let result = [];\n    for (let i = 0; i < data.length; i += 4) {\n        result.push(parseInt(data.substring(i, i + 4), 16));\n    }\n    return result;\n}\n\nfunction createTable(data: string, func?: (value: string) => Array<number>): Table {\n    if (!func) {\n        func = function(value: string) { return [ parseInt(value, 16) ]; }\n    }\n\n    let lo = 0;\n\n    let result: Table = { };\n    data.split(\",\").forEach((pair) => {\n        let comps = pair.split(\":\");\n        lo += parseInt(comps[0], 16);\n        result[lo] = func(comps[1]);\n    });\n\n    return result;\n}\n\nfunction createRangeTable(data: string): Array<Ranged> {\n    let hi = 0;\n    return data.split(\",\").map((v) => {\n        let comps = v.split(\"-\");\n        if (comps.length === 1) {\n            comps[1] = \"0\";\n        } else if (comps[1] === \"\") {\n            comps[1] = \"1\";\n        }\n\n        let lo = hi + parseInt(comps[0], 16);\n        hi = parseInt(comps[1], 16);\n        return { l: lo, h: hi };\n    });\n}\n\nfunction matchMap(value: number, ranges: Array<Ranged>): Ranged {\n    let lo = 0;\n    for (let i = 0; i < ranges.length; i++) {\n        let range = ranges[i];\n        lo += range.l;\n        if (value >= lo && value <= lo + range.h && ((value - lo) % (range.d || 1)) === 0) {\n            if (range.e && range.e.indexOf(value - lo) !== -1) { continue; }\n            return range;\n        }\n    }\n    return null;\n}\n\nconst Table_A_1_ranges = createRangeTable(\"221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d\");\n\n// @TODO: Make this relative...\nconst Table_B_1_flags = \"ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff\".split(\",\").map((v) => parseInt(v, 16));\n\nconst Table_B_2_ranges: Array<Ranged> = [\n    { h: 25, s: 32, l: 65 },\n    { h: 30, s: 32, e: [ 23 ], l: 127 },\n    { h: 54, s: 1, e: [ 48 ], l: 64, d: 2 },\n    { h: 14, s: 1, l: 57, d: 2 },\n    { h: 44, s: 1, l: 17, d: 2 },\n    { h: 10, s: 1, e: [ 2, 6, 8 ], l: 61, d: 2 },\n    { h: 16, s: 1, l: 68, d: 2 },\n    { h: 84, s: 1, e: [ 18, 24, 66 ], l: 19, d: 2 },\n    { h: 26, s: 32, e: [ 17 ], l: 435 },\n    { h: 22, s: 1, l: 71, d: 2 },\n    { h: 15, s: 80, l: 40 },\n    { h: 31, s: 32, l: 16 },\n    { h: 32, s: 1, l: 80, d: 2 },\n    { h: 52, s: 1, l: 42, d: 2 },\n    { h: 12, s: 1, l: 55, d: 2 },\n    { h: 40, s: 1, e: [ 38 ], l: 15, d: 2 },\n    { h: 14, s: 1, l: 48, d: 2 },\n    { h: 37, s: 48, l: 49 },\n    { h: 148, s: 1, l: 6351, d: 2 },\n    { h: 88, s: 1, l: 160, d: 2 },\n    { h: 15, s: 16, l: 704 },\n    { h: 25, s: 26, l: 854 },\n    { h: 25, s: 32, l: 55915 },\n    { h: 37, s: 40, l: 1247 },\n    { h: 25, s: -119711, l: 53248 },\n    { h: 25, s: -119763, l: 52 },\n    { h: 25, s: -119815, l: 52 },\n    { h: 25, s: -119867, e: [ 1, 4, 5, 7, 8, 11, 12, 17 ], l: 52 },\n    { h: 25, s: -119919, l: 52 },\n    { h: 24, s: -119971, e: [ 2, 7, 8, 17 ], l: 52 },\n    { h: 24, s: -120023, e: [ 2, 7, 13, 15, 16, 17 ], l: 52 },\n    { h: 25, s: -120075, l: 52 },\n    { h: 25, s: -120127, l: 52 },\n    { h: 25, s: -120179, l: 52 },\n    { h: 25, s: -120231, l: 52 },\n    { h: 25, s: -120283, l: 52 },\n    { h: 25, s: -120335, l: 52 },\n    { h: 24, s: -119543, e: [ 17 ], l: 56 },\n    { h: 24, s: -119601, e: [ 17 ], l: 58 },\n    { h: 24, s: -119659, e: [ 17 ], l: 58 },\n    { h: 24, s: -119717, e: [ 17 ], l: 58 },\n    { h: 24, s: -119775, e: [ 17 ], l: 58 }\n];\nconst Table_B_2_lut_abs = createTable(\"b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3\");\nconst Table_B_2_lut_rel = createTable(\"179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7\");\nconst Table_B_2_complex = createTable(\"df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D\", bytes2);\n\nconst Table_C_ranges = createRangeTable(\"80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001\");\n\n\nfunction flatten(values: Array<Array<number>>): Array<number> {\n    return values.reduce((accum, value) => {\n        value.forEach((value) => { accum.push(value); });\n        return accum;\n    }, [ ]);\n}\n\nexport function _nameprepTableA1(codepoint: number): boolean {\n    return !!matchMap(codepoint, Table_A_1_ranges);\n}\n\nexport function _nameprepTableB2(codepoint: number): Array<number> {\n    let range = matchMap(codepoint, Table_B_2_ranges);\n    if (range) { return [ codepoint + range.s ]; }\n\n    let codes = Table_B_2_lut_abs[codepoint];\n    if (codes) { return codes; }\n\n    let shift = Table_B_2_lut_rel[codepoint];\n    if (shift) { return [ codepoint + shift[0] ]; }\n\n    let complex = Table_B_2_complex[codepoint];\n    if (complex) { return complex; }\n\n    return null;\n}\n\nexport function _nameprepTableC(codepoint: number): boolean {\n    return !!matchMap(codepoint, Table_C_ranges);\n}\n\nexport function nameprep(value: string): string {\n\n    // This allows platforms with incomplete normalize to bypass\n    // it for very basic names which the built-in toLowerCase\n    // will certainly handle correctly\n    if (value.match(/^[a-z0-9-]*$/i) && value.length <= 59) { return value.toLowerCase(); }\n\n    // Get the code points (keeping the current normalization)\n    let codes = toUtf8CodePoints(value);\n\n    codes = flatten(codes.map((code) => {\n        // Substitute Table B.1 (Maps to Nothing)\n        if (Table_B_1_flags.indexOf(code) >= 0) { return [ ]; }\n        if (code >= 0xfe00 && code <= 0xfe0f) { return [ ]; }\n\n        // Substitute Table B.2 (Case Folding)\n        let codesTableB2 = _nameprepTableB2(code);\n        if (codesTableB2) { return codesTableB2; }\n\n        // No Substitution\n        return [ code ];\n    }));\n\n    // Normalize using form KC\n    codes = toUtf8CodePoints(_toUtf8String(codes), UnicodeNormalizationForm.NFKC);\n\n    // Prohibit Tables C.1.2, C.2.2, C.3, C.4, C.5, C.6, C.7, C.8, C.9\n    codes.forEach((code) => {\n        if (_nameprepTableC(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_PROHIBITED\");\n        }\n    });\n\n    // Prohibit Unassigned Code Points (Table A.1)\n    codes.forEach((code) => {\n        if (_nameprepTableA1(code)) {\n            throw new Error(\"STRINGPREP_CONTAINS_UNASSIGNED\");\n        }\n    });\n\n    // IDNA extras\n    let name = _toUtf8String(codes);\n\n    // IDNA: 4.2.3.1\n    if (name.substring(0, 1) === \"-\" || name.substring(2, 4) === \"--\" || name.substring(name.length - 1) === \"-\") {\n        throw new Error(\"invalid hyphen\");\n    }\n\n    // IDNA: 4.2.4\n    if (name.length > 63) { throw new Error(\"too long\"); }\n\n\n\n    return name;\n}\n\n","import { concat, hexlify } from \"@ethersproject/bytes\";\nimport { nameprep, toUtf8Bytes } from \"@ethersproject/strings\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst Zeros = new Uint8Array(32);\nZeros.fill(0);\n\nconst Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\n\nexport function isValidName(name: string): boolean {\n    try {\n        const comps = name.split(\".\");\n        for (let i = 0; i < comps.length; i++) {\n            if (nameprep(comps[i]).length === 0) {\n                throw new Error(\"empty\")\n            }\n        }\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function namehash(name: string): string {\n    /* istanbul ignore if */\n    if (typeof(name) !== \"string\") {\n        logger.throwArgumentError(\"invalid ENS name; not a string\", \"name\", name);\n    }\n\n    let current = name;\n    let result: string | Uint8Array = Zeros;\n    while (current.length) {\n        const partition = current.match(Partition);\n        if (partition == null || partition[2] === \"\") {\n            logger.throwArgumentError(\"invalid ENS address; missing component\", \"name\", name);\n        }\n        const label = toUtf8Bytes(nameprep(partition[3]));\n        result = keccak256(concat([result, keccak256(label)]));\n\n        current = partition[2] || \"\";\n    }\n\n    return hexlify(result);\n}\n\n","\"use strict\";\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\n\nexport function decode(textData: string): Uint8Array {\n    textData = atob(textData);\n    const data = [];\n    for (let i = 0; i < textData.length; i++) {\n        data.push(textData.charCodeAt(i));\n    }\n    return arrayify(data);\n}\n\nexport function encode(data: BytesLike): string {\n    data = arrayify(data);\n    let textData = \"\";\n    for (let i = 0; i < data.length; i++) {\n        textData += String.fromCharCode(data[i]);\n    }\n    return btoa(textData);\n}\n\n\n","export const version = \"web/5.5.1\";\n","\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n","\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n    }\n    const reData = new RegExp(\"^data:([a-z0-9-]+/[a-z0-9-]+);base64,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": dataMatch[1] },\n                body: base64Decode(dataMatch[2])\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n\n            } else if (response.statusCode < 200 || response.statusCode >= 300) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n","export const version = \"providers/5.5.1\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: address,\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string): null | string {\n    try {\n        return toUtf8String(_parseBytes(result));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            return _parseBytes(await this.provider.call(tx));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ ];\n        try {\n            // test data for ricmoo.eth\n            //const avatar = \"eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233\";\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n\n                if (match == null) { continue; }\n                switch (match[1]) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: `https:/\\/gateway.ipfs.io/ipfs/${ avatar.substring(7) }` }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (match[1] === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: match[1], content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (match[1] === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (match[1] === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n                        let metadataUrl = _parseString(await this.provider.call(tx))\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (match[1] === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                        }\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n\n                        // Pull the image URL out\n                        if (!metadata || typeof(metadata.image) !== \"string\" || !metadata.image.match(/^(https:\\/\\/|data:)/i)) {\n                            return null;\n                        }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                        linkage.push({ type: \"url\", content: metadata.image });\n\n                        return { linkage, url: metadata.image };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(reverseName);\n            if (!resolverAddress) { return null; }\n\n            resolver = new Resolver(this, resolverAddress, \"_\", address);\n\n        } else {\n            // ENS name; forward lookup\n            resolver = await this.getResolver(nameOrAddress);\n            if (!resolver) { return null; }\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction checkError(method: string, error: any, params: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n\n        logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string, network?: Networkish) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        super(url, network);\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this._websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this._websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this._websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this._websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this._websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this._websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum\":\n                host = \"arb-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arb-rinkeby.g.alchemy.com/v2/\";\n                break;\n            case \"optimism\":\n                host = \"opt-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"optimism-kovan\":\n                host = \"opt-kovan.g.alchemy.com/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nexport function shuffled(array: Array<any>): Array<any> {\n    array = array.slice();\n\n    for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const tmp = array[i];\n        array[i] = array[j];\n        array[j] = tmp;\n    }\n\n    return array;\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        logger.checkNew(new.target, FallbackProvider);\n\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            case \"optimism\":\n                host = \"optimism-mainnet.infura.io\";\n                break;\n            case \"optimism-kovan\":\n                host = \"optimism-kovan.infura.io\";\n                break;\n            case \"arbitrum\":\n                host = \"arbitrum-mainnet.infura.io\";\n                break;\n            case \"arbitrum-rinkeby\":\n                host = \"arbitrum-rinkeby.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n","\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        logger.checkNew(new.target, Web3Provider);\n\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n","\"use strict\";\n\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, BytesLike, concat, hexlify } from \"@ethersproject/bytes\";\n\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\n\n\nexport function formatBytes32String(text: string): string {\n\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n\n    // Check we have room for null-termination\n    if (bytes.length > 31) { throw new Error(\"bytes32 string must be less than 32 bytes\"); }\n\n    // Zero-pad (implicitly null-terminates)\n    return hexlify(concat([ bytes, HashZero ]).slice(0, 32));\n}\n\nexport function parseBytes32String(bytes: BytesLike): string {\n    const data = arrayify(bytes);\n\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) { throw new Error(\"invalid bytes32 - not 32 bytes long\"); }\n    if (data[31] !== 0) { throw new Error(\"invalid bytes32 string - no null terminator\"); }\n\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) { length--; }\n\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n\n","export const version = \"units/5.5.0\";\n","\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { formatFixed, parseFixed } from \"@ethersproject/bignumber\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst names = [\n    \"wei\",\n    \"kwei\",\n    \"mwei\",\n    \"gwei\",\n    \"szabo\",\n    \"finney\",\n    \"ether\",\n];\n\n\n// Some environments have issues with RegEx that contain back-tracking, so we cannot\n// use them.\nexport function commify(value: string | number): string {\n    const comps = String(value).split(\".\");\n\n    if (comps.length > 2 || !comps[0].match(/^-?[0-9]*$/) || (comps[1] && !comps[1].match(/^[0-9]*$/)) || value === \".\" || value === \"-.\") {\n        logger.throwArgumentError(\"invalid value\", \"value\", value);\n    }\n\n    // Make sure we have at least one whole digit (0 if none)\n    let whole = comps[0];\n\n    let negative = \"\";\n    if (whole.substring(0, 1) === \"-\") {\n        negative = \"-\";\n        whole = whole.substring(1);\n    }\n\n    // Make sure we have at least 1 whole digit with no leading zeros\n    while (whole.substring(0, 1) === \"0\") { whole = whole.substring(1); }\n    if (whole === \"\") { whole = \"0\"; }\n\n    let suffix = \"\";\n    if (comps.length === 2) { suffix = \".\" + (comps[1] || \"0\"); }\n    while (suffix.length > 2 && suffix[suffix.length - 1] === \"0\") {\n        suffix = suffix.substring(0, suffix.length - 1);\n    }\n\n    const formatted = [];\n    while (whole.length) {\n        if (whole.length <= 3) {\n            formatted.unshift(whole);\n            break;\n        } else {\n            const index = whole.length - 3;\n            formatted.unshift(whole.substring(index));\n            whole = whole.substring(0, index);\n        }\n    }\n\n    return negative + formatted.join(\",\") + suffix;\n}\n\nexport function formatUnits(value: BigNumberish, unitName?: string | BigNumberish): string {\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return formatFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function parseUnits(value: string, unitName?: BigNumberish): BigNumber {\n    if (typeof(value) !== \"string\") {\n        logger.throwArgumentError(\"value must be a string\", \"value\", value);\n    }\n    if (typeof(unitName) === \"string\") {\n        const index = names.indexOf(unitName);\n        if (index !== -1) { unitName = 3 * index; }\n    }\n    return parseFixed(value, (unitName != null) ? unitName: 18);\n}\n\nexport function formatEther(wei: BigNumberish): string {\n    return formatUnits(wei, 18);\n}\n\nexport function parseEther(ether: string): BigNumber {\n    return parseUnits(ether, 18);\n}\n\n","export const version = \"ethers/5.5.2\";\n","\"use strict\";\n\nimport { BaseContract, Contract, ContractFactory } from \"@ethersproject/contracts\";\n\nimport { BigNumber, FixedNumber } from \"@ethersproject/bignumber\";\n\nimport { Signer, VoidSigner } from \"@ethersproject/abstract-signer\";\nimport { Wallet } from \"@ethersproject/wallet\";\n\nimport * as constants from \"@ethersproject/constants\";\n\nimport * as providers from \"@ethersproject/providers\";\nimport { getDefaultProvider } from \"@ethersproject/providers\";\n\nimport { Wordlist, wordlists} from \"@ethersproject/wordlists\";\n\nimport * as utils from \"./utils\";\n\nimport { ErrorCode as errors, Logger } from \"@ethersproject/logger\";\n\n////////////////////////\n// Types\n\nimport { BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike, Signature } from \"@ethersproject/bytes\";\nimport { Transaction, UnsignedTransaction } from \"@ethersproject/transactions\";\n\n\n////////////////////////\n// Compile-Time Constants\n\n// This is generated by \"npm run dist\"\nimport { version } from \"./_version\";\n\nconst logger = new Logger(version);\n\n////////////////////////\n// Types\n\nimport {\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface\n} from \"@ethersproject/contracts\";\n\n\n////////////////////////\n// Exports\n\nexport {\n    Signer,\n\n    Wallet,\n    VoidSigner,\n\n    getDefaultProvider,\n    providers,\n\n    BaseContract,\n    Contract,\n    ContractFactory,\n\n    BigNumber,\n    FixedNumber,\n\n    constants,\n    errors,\n\n    logger,\n\n    utils,\n\n    wordlists,\n\n\n    ////////////////////////\n    // Compile-Time Constants\n\n    version,\n\n\n    ////////////////////////\n    // Types\n\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface,\n\n    BigNumberish,\n\n    Bytes,\n    BytesLike,\n\n    Signature,\n\n    Transaction,\n    UnsignedTransaction,\n\n    Wordlist\n};\n\n","\"use strict\";\n\n// To modify this file, you must update ./misc/admin/lib/cmds/update-exports.js\n\nimport * as ethers from \"./ethers\";\n\ntry {\n    const anyGlobal = (window as any);\n\n    if (anyGlobal._ethers == null) {\n        anyGlobal._ethers = ethers;\n    }\n} catch (error) { }\n\nexport { ethers };\n\nexport {\n    Signer,\n\n    Wallet,\n    VoidSigner,\n\n    getDefaultProvider,\n    providers,\n\n    BaseContract,\n    Contract,\n    ContractFactory,\n\n    BigNumber,\n    FixedNumber,\n\n    constants,\n    errors,\n\n    logger,\n\n    utils,\n\n    wordlists,\n\n\n    ////////////////////////\n    // Compile-Time Constants\n\n    version,\n\n\n    ////////////////////////\n    // Types\n\n    ContractFunction,\n    ContractReceipt,\n    ContractTransaction,\n    Event,\n    EventFilter,\n\n    Overrides,\n    PayableOverrides,\n    CallOverrides,\n\n    PopulatedTransaction,\n\n    ContractInterface,\n\n    BigNumberish,\n\n    Bytes,\n    BytesLike,\n\n    Signature,\n\n    Transaction,\n    UnsignedTransaction,\n\n    Wordlist\n} from \"./ethers\";\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["logger","ripemd160","data","update","digest","sha256","sha512","computeHmac","algorithm","key","throwError","operation","SupportedAlgorithm","regexBytes","RegExp","regexNumber","regexArray","_pack","type","value","isArray","match","size","parseInt","String","throwArgumentError","toTwos","byteLength","substring","Array","baseType","length","result","forEach","push","pack","types","values","tight","index","keccak256","root","checkInt","checkInts","arrayish","i","coerceArray","arg","copy","buffer","ArrayBuffer","isView","name","slice","prototype","call","Error","Uint8Array","createArray","copyArray","sourceArray","targetArray","targetStart","sourceStart","sourceEnd","set","convertUtf8","toBytes","text","encodeURI","c","charCodeAt","substr","fromBytes","bytes","fromCharCode","join","convertHex","Hex","v","numberOfRounds","rcon","S","Si","T1","T2","T3","T4","T5","T6","T7","T8","U1","U2","U3","U4","convertToInt32","AES","this","Object","defineProperty","_prepare","rounds","_Ke","_Kd","roundKeyCount","KC","tk","tt","rconpointer","t","r","encrypt","plaintext","a","decrypt","ciphertext","ModeOfOperationECB","description","_aes","block","ModeOfOperationCBC","iv","_lastCipherblock","j","ModeOfOperationCFB","segmentSize","_shiftRegister","xorSegment","encrypted","ModeOfOperationOFB","_lastPrecipher","_lastPrecipherIndex","Counter","initialValue","_counter","setValue","setBytes","increment","ModeOfOperationCTR","counter","_remainingCounter","_remainingCounterIndex","aesjs","ModeOfOperation","ecb","cbc","cfb","ofb","ctr","utils","hex","utf8","padding","pkcs7","pad","padder","strip","_arrayTest","module","exports","ALPHABET","ALPHABET_MAP","z","x","charAt","undefined","TypeError","polymodStep","pre","b","prefixChk","prefix","chk","__decode","str","LIMIT","lowered","toLowerCase","uppered","toUpperCase","split","lastIndexOf","wordChars","words","convert","inBits","outBits","bits","maxV","decodeUnsafe","res","apply","arguments","decode","encode","toWordsUnsafe","toWords","fromWordsUnsafe","fromWords","basex","require","ForkEvent","_isForkEvent","Provider","checkAbstract","getBlock","gasPrice","getGasPrice","catch","error","maxFeePerGas","maxPriorityFeePerGas","baseFeePerGas","mul","add","eventName","listener","on","off","_isProvider","allowedTransactionKeys","forwardErrors","Signer","blockTag","_checkProvider","provider","getBalance","getAddress","getTransactionCount","transaction","checkTransaction","tx","estimateGas","populateTransaction","signTransaction","signedTx","sendTransaction","getNetwork","network","chainId","getFeeData","resolveName","indexOf","from","Promise","all","resolve","then","to","address","hasEip1559","feeData","nonce","gasLimit","code","getChainId","results","_isSigner","VoidSigner","checkNew","message","_fail","domain","accessList","customData","resolver","nameOrPromise","resolveAddresses","paramType","map","components","reject","makeError","argument","arrayChildren","contract","fragment","args","overrides","inputs","pop","checkArgumentCount","signer","override","check","resolvedAddress","resolved","interface","encodeFunctionData","ro","toNumber","accessListify","gas","intrinsic","roValue","isZero","payable","leftovers","keys","filter","l","JSON","stringify","addContractWait","wait","bind","confirmations","receipt","events","logs","log","event","parsed","parseLog","e","topics","decodeEventLog","eventFragment","eventSignature","signature","removeListener","blockHash","getTransaction","transactionHash","getTransactionReceipt","buildCall","collapseSimple","signerOrProvider","deployTransaction","_deployed","decodeFunctionResult","outputs","buildDefault","constant","txRequest","buildSend","getEventTag","topic","RunningEvent","tag","_listeners","once","done","item","listenerCount","argsCopy","setTimeout","ErrorRunningEvent","FragmentRunningEvent","contractInterface","getEventTopic","format","decodeError","errors","WildcardRunningEvent","BaseContract","addressOrName","Contract","isSigner","isProvider","uniqueFilters","filters","encodeFilterTopics","warn","uniqueNames","uniqueSignatures","functions","callStatic","buildPopulate","buildEstimate","signatures","_deployedPromise","getCode","contractAddress","deployed","constructor","runningEvent","_runningEvents","_normalizeRunningEvent","getEvent","emit","_wrappedEmits","_checkRunningEvents","prepareEvent","addListener","wrappedEmit","_wrapEvent","getEmit","fromBlockOrBlockhash","toBlock","_getRunningEvent","fromBlock","getLogs","_addEventListener","run","reduce","accum","listeners","removeAllListeners","ContractFactory","bytecode","bytecodeHex","object","deploy","encodeDeploy","params","unsignedTx","getDeployTransaction","getContract","compilerOutput","parse","abi","evm","getInterface","_constructorGuard","Zero","NegativeOne","throwFault","fault","zeros","getMultiplier","decimals","formatFixed","multiplier","negative","lt","fraction","mod","toString","whole","div","parseFixed","comps","wholeValue","fractionValue","wei","FixedFormat","constructorGuard","signed","width","_multiplier","freeze","defaultValue","FixedNumber","_hex","_value","_isFixedNumber","other","_checkFormat","fromValue","sub","hasFraction","isNegative","subUnsafe","ONE","toFormat","addUnsafe","factor","bump","BUMP","mulUnsafe","floor","divUnsafe","fromTwos","toHexString","parseFloat","fromString","fixedFormat","numeric","decimal","hashMessage","fill","One","MaxUint256","hexTrue","hexFalse","domainFieldTypes","version","verifyingContract","salt","domainFieldNames","checkString","domainChecks","getBaseEncoder","boundsUpper","mask","boundsLower","gt","padOffset","hexPadRight","id","encodeType","fields","TypedDataEncoder","links","parents","subtypes","field","primaryTypes","n","checkCircular","found","child","subtype","primaryType","st","sort","_types","encoder","_encoderCache","_getEncoder","subEncoder","getEncoder","encodedType","unshift","encodeData","hashStruct","callback","_visit","domainFields","EIP712Domain","hashDomain","hash","ensCache","visit","domainValues","domainTypes","typesWithDomain","BaseX","alphabet","_alphabetMap","source","digits","carry","base","string","k","_leader","q","byte","reverse","Base58","pbkdf2","password","iterations","keylen","hashAlgorithm","hLen","T","DK","block1","U","Math","ceil","destPos","len","Wordlist","locale","mnemonic","wordlist","word","getWord","getWordIndex","lang","loadWords","replace","langEn","register","wordlists","en","N","MasterSecret","HardenedBit","getUpperMask","bytes32","base58check","sha2","getWordlist","defaultPath","HDNode","privateKey","publicKey","parentFingerprint","chainCode","depth","mnemonicOrPath","signingKey","compressedPublicKey","computeAddress","path","I","IL","IR","ki","Ki","_addPoint","srcMnemonic","phrase","fingerprint","shift","component","_derive","seed","seedArray","entropyToMnemonic","mnemonicToEntropy","_fromSeed","mnemonicToSeed","extendedKey","checkNormalize","entropy","offset","normalize","bit","entropyBits","checksumMask","indices","remainingBits","checksumBits","checksum","isValidMnemonic","getAccountPath","anyGlobal","window","g","crypto","msCrypto","randomBytes","getRandomValues","looseArrayify","hexString","zpad","getPassword","searchPath","currentChild","matchingChild","uuidV4","CrowdsaleAccount","_isCrowdsaleAccount","json","ethaddr","encseed","encryptedSeed","aesCbc","seedHex","seedHexBytes","isCrowdsaleWallet","isKeystoreWallet","getJsonWalletAddress","hasMnemonic","KeystoreAccount","_isKeystoreAccount","_getAccount","aesCtr","_decrypt","mnemonicKey","account","mnemonicCiphertext","mnemonicIv","mnemonicCounter","mnemonicAesCtr","node","fromMnemonic","derivePath","pbkdf2Sync","passwordBytes","count","dkLen","prfFunc","_computeKdfKey","pbkdf2Func","scryptFunc","progressCallback","kdf","p","prf","decryptJsonWallet","scrypt","decryptJsonWalletSync","Wallet","curve","_mnemonic","_signingKey","signDigest","serialize","populated","options","client","uuidRandom","uuid","derivedKey","macPrefix","mac","Crypto","cipher","cipherparams","kdfparams","dklen","now","Date","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","extraEntropy","verifyMessage","recoverAddress","verifyTypedData","AddressZero","HashZero","EtherSymbol","ethDefaultProvider","func","providers","providerList","InfuraProvider","infura","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","CloudflareProvider","FallbackProvider","quorum","renetwork","etcDefaultProvider","url","JsonRpcProvider","homestead","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","standard","defaultProvider","createTable","lo","pair","createRangeTable","hi","h","matchMap","ranges","range","d","Table_A_1_ranges","Table_B_1_flags","Table_B_2_ranges","s","Table_B_2_lut_abs","Table_B_2_lut_rel","Table_B_2_complex","Table_C_ranges","nameprep","codes","codesTableB2","codepoint","_nameprepTableB2","Zeros","Partition","isValidName","namehash","current","partition","label","textData","atob","btoa","getUrl","href","request","method","headers","body","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetch","response","arrayBuffer","get","statusCode","status","statusMessage","statusText","staller","duration","bodyify","trim","_fetchData","connection","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","allow304","timeout","allowGzip","user","allowInsecureAuthentication","authorization","reData","dataMatch","requestBody","requestMethod","flatHeaders","header","runningTimeout","timer","promise","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","random","pow","serverError","throttleRetry","race","fetchJson","updated","poll","ceiling","interval","retryLimit","oncePoll","onceBlock","Formatter","formats","getDefaultFormats","bigNumber","number","allowNull","blockNumber","transactionIndex","uint256","creates","raw","transactionRequest","receiptLog","arrayOf","logIndex","gasUsed","logsBloom","cumulativeGasUsed","effectiveGasPrice","parentHash","difficulty","miner","extraData","transactions","blockWithTransactions","transactionResponse","filterLog","removed","boolean","allowFalsish","strict","author","_difficulty","_block","input","networkId","byzantium","checkKey","checkValue","nullValue","replaceValue","array","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","checkTopic","serializeTopics","unique","sorted","isForkEvent","getTime","PollableEvents","Event","coinInfos","symbol","p2pkh","p2sh","ilk","bytes32ify","base58Encode","matchers","_parseString","_parseBytes","Resolver","formatter","selector","parameters","coinType","hexBytes","coinInfo","callAddress","_fetchBytes","_getAddress","linkage","getText","avatar","content","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","metadataUrl","metadata","image","ipfs","swarm","keyBytes","defaultFormatter","nextPollId","BaseProvider","_events","_emitted","getFormatter","anyNetwork","detectNetwork","_networkPromise","_ready","knownNetwork","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","perform","networkError","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","abs","previousBlockNumber","eventBlockNumber","runner","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","getBlockNumber","_waitForTransaction","replaceable","cancelFuncs","alreadyDone","minedHandler","lastBlockNumber","startBlock","scannedBlock","replaceHandler","mined","getBlockWithTransactions","ti","waitForTransaction","reason","eq","cancelled","replacement","_wrapTransaction","unref","_getBlockTag","position","expectedHash","returnedHash","confirms","signedTransaction","hexTx","_getTransactionRequest","blockHashOrBlockTag","includeTransactions","blockWithTxs","_getBlock","_getFilter","_getResolver","getResolver","reverseName","resolverAddress","nameOrAddress","getAvatar","pollable","_startEvent","stopped","eventTag","_stopEvent","errorGas","checkError","responseText","getResult","payload","getLowerCase","JsonRpcSigner","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","sender","hexlifyTransaction","sendUncheckedTransaction","networkOrReady","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","getSigner","connectUnchecked","jsonrpc","action","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","allowExtra","allowed","WS","WebSocket","NextId","WebSocketProvider","_wsReady","_websocket","onopen","_requests","onmessage","messageEvent","_subs","subscription","fauxPoll","_detectNetwork","rid","param","subIdPromise","_subIds","subId","_subscribe","emitReceipt","readyState","onerror","close","StaticJsonRpcProvider","UrlJsonRpcProvider","apiKey","defaultApiKey","AlchemyWebSocketProvider","host","getTransactionPostData","maxFeePerGs","storageKeys","getJsonResult","checkLogTag","getBaseUrl","query","baseUrl","apikey","post","getPostUrl","getPostData","procFunc","payloadStr","txhash","postData","topic0","blocks","ethusd","endBlock","startblock","endblock","timeStamp","shuffled","tmp","checkNetworks","median","maxDelta","middle","nextRid","getPromise","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","start","getProcessFunc","configs","_highestBlockNumber","tally","normalizedTally","waitForSync","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","providerConfigs","configOrProvider","stallTimeout","priority","total","first","t0","inflightWeight","backend","waiting","errorCode","props","IpcProvider","defaultProjectId","InfuraWebSocketProvider","projectId","projectSecret","apiKeyObj","JsonRpcBatchProvider","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationIds","applicationId","loadBalancer","applicationSecretKey","buildWeb3LegacyFetcher","sendFunc","fetcher","Web3Provider","jsonRpcFetchFunc","subprovider","isMetaMask","buildEip1193Fetcher","sendAsync","getDefaultProvider","formatBytes32String","parseBytes32String","names","commify","suffix","formatted","formatUnits","unitName","parseUnits","formatEther","parseEther","ether","_ethers","_toConsumableArray","arr","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray"],"sourceRoot":""}