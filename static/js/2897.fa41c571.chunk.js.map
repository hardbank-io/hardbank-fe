{"version":3,"file":"static/js/2897.fa41c571.chunk.js","mappings":"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","sources":["../node_modules/@gnosis.pm/safe-apps-provider/src/index.ts","../node_modules/@gnosis.pm/safe-apps-provider/src/provider.ts","../node_modules/@gnosis.pm/safe-apps-provider/src/utils.ts"],"sourcesContent":["export { SafeAppProvider } from './provider';\n","import SafeAppsSDK, { SafeInfo, Web3TransactionObject } from '@gnosis.pm/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider } from './types';\nimport { getLowerCase } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n  private events = new EventEmitter();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.events.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public on(event: string, listener: any): void {\n    this.events.on(event, listener);\n  }\n\n  public once(event: string, listener: any): void {\n    this.events.once(event, listener);\n  }\n\n  public off(event: string, listener: any): void {\n    this.events.off(event, listener);\n  }\n\n  public removeListener(event: string, listener: any): void {\n    this.events.removeListener(event, listener);\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'eth_sendTransaction':\n        const tx = {\n          value: '0',\n          data: '0x',\n          ...params[0],\n        };\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n        });\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.transactionHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.transactionHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return 0;\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n","export function getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n"],"names":["SafeAppProvider","safe","sdk","submittedTxs","Map","events","EventEmitter","this","emit","chainId","event","listener","on","once","off","removeListener","method","params","safeAddress","toString","tx","value","data","txs","send","resp","set","safeTxHash","from","hash","gas","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","eth","getBlockByNumber","block","number","getBalance","getLowerCase","getCode","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","transactionHash","has","get","getTransactionByHash","then","getTransactionReceipt","call","getPastLogs","Error","request","callback","result","jsonrpc","id","catch","error","toLowerCase"],"sourceRoot":""}